
RTC_Calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004288  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004504  08004504  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004504  08004504  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800450c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000074  08004580  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004580  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8e4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002327  00000000  00000000  0002f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00031cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00032c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fed  00000000  00000000  00033ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001088d  00000000  00000000  0005baa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f70b4  00000000  00000000  0006c332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001633e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004810  00000000  00000000  00163438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004400 	.word	0x08004400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004400 	.word	0x08004400

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fc04 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f814 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f948 	bl	8000510 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000280:	f000 f8f2 	bl	8000468 <MX_TIM3_Init>
  MX_RTC_Init();
 8000284:	f000 f86c 	bl	8000360 <MX_RTC_Init>
  MX_TIM2_Init();
 8000288:	f000 f892 	bl	80003b0 <MX_TIM2_Init>

//  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 18);

#ifdef EXT_CLK_USE_IN_CALI
  /*start TIM3 generation in interrupt mode*/
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <main+0x30>)
 800028e:	f002 fc41 	bl	8002b14 <HAL_TIM_Base_Start_IT>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <main+0x2c>
	  Error_Handler();
 8000298:	f000 f9be 	bl	8000618 <Error_Handler>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x2c>
 800029e:	bf00      	nop
 80002a0:	20000100 	.word	0x20000100

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b096      	sub	sp, #88	; 0x58
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2244      	movs	r2, #68	; 0x44
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f003 f90e 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ca:	f000 ff47 	bl	800115c <HAL_PWREx_ControlVoltageScaling>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002d4:	f000 f9a0 	bl	8000618 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002d8:	f000 ff22 	bl	8001120 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002dc:	4b1f      	ldr	r3, [pc, #124]	; (800035c <SystemClock_Config+0xb8>)
 80002de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002e2:	4a1e      	ldr	r2, [pc, #120]	; (800035c <SystemClock_Config+0xb8>)
 80002e4:	f023 0318 	bic.w	r3, r3, #24
 80002e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002ec:	2305      	movs	r3, #5
 80002ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fe:	2303      	movs	r3, #3
 8000300:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000302:	2301      	movs	r3, #1
 8000304:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000306:	2314      	movs	r3, #20
 8000308:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800030a:	2307      	movs	r3, #7
 800030c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4618      	mov	r0, r3
 800031c:	f000 ff74 	bl	8001208 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000326:	f000 f977 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2303      	movs	r3, #3
 8000330:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fb3c 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800034e:	f000 f963 	bl	8000618 <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3758      	adds	r7, #88	; 0x58
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_RTC_Init+0x48>)
 8000366:	4a11      	ldr	r2, [pc, #68]	; (80003ac <MX_RTC_Init+0x4c>)
 8000368:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_RTC_Init+0x48>)
 800036c:	2200      	movs	r2, #0
 800036e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <MX_RTC_Init+0x48>)
 8000372:	227f      	movs	r2, #127	; 0x7f
 8000374:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_RTC_Init+0x48>)
 8000378:	22ff      	movs	r2, #255	; 0xff
 800037a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MX_RTC_Init+0x48>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_RTC_Init+0x48>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <MX_RTC_Init+0x48>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_RTC_Init+0x48>)
 8000390:	2200      	movs	r2, #0
 8000392:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <MX_RTC_Init+0x48>)
 8000396:	f002 f9bb 	bl	8002710 <HAL_RTC_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80003a0:	f000 f93a 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000090 	.word	0x20000090
 80003ac:	40002800 	.word	0x40002800

080003b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ce:	4b25      	ldr	r3, [pc, #148]	; (8000464 <MX_TIM2_Init+0xb4>)
 80003d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003d6:	4b23      	ldr	r3, [pc, #140]	; (8000464 <MX_TIM2_Init+0xb4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003dc:	4b21      	ldr	r3, [pc, #132]	; (8000464 <MX_TIM2_Init+0xb4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80003e2:	4b20      	ldr	r3, [pc, #128]	; (8000464 <MX_TIM2_Init+0xb4>)
 80003e4:	f04f 32ff 	mov.w	r2, #4294967295
 80003e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_TIM2_Init+0xb4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <MX_TIM2_Init+0xb4>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003f6:	481b      	ldr	r0, [pc, #108]	; (8000464 <MX_TIM2_Init+0xb4>)
 80003f8:	f002 facc 	bl	8002994 <HAL_TIM_Base_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000402:	f000 f909 	bl	8000618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	4619      	mov	r1, r3
 800041e:	4811      	ldr	r0, [pc, #68]	; (8000464 <MX_TIM2_Init+0xb4>)
 8000420:	f002 fd07 	bl	8002e32 <HAL_TIM_ConfigClockSource>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800042a:	f000 f8f5 	bl	8000618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	480a      	ldr	r0, [pc, #40]	; (8000464 <MX_TIM2_Init+0xb4>)
 800043c:	f002 ff28 	bl	8003290 <HAL_TIMEx_MasterConfigSynchronization>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000446:	f000 f8e7 	bl	8000618 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM_TIM2_ETR_LSE) != HAL_OK)
 800044a:	2102      	movs	r1, #2
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_TIM2_Init+0xb4>)
 800044e:	f002 ffa7 	bl	80033a0 <HAL_TIMEx_RemapConfig>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000458:	f000 f8de 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200000b4 	.word	0x200000b4

08000468 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <MX_TIM3_Init+0xa0>)
 8000488:	4a20      	ldr	r2, [pc, #128]	; (800050c <MX_TIM3_Init+0xa4>)
 800048a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <MX_TIM3_Init+0xa0>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_TIM3_Init+0xa0>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32767;
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_TIM3_Init+0xa0>)
 800049a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800049e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_TIM3_Init+0xa0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_TIM3_Init+0xa0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004ac:	4816      	ldr	r0, [pc, #88]	; (8000508 <MX_TIM3_Init+0xa0>)
 80004ae:	f002 fa71 	bl	8002994 <HAL_TIM_Base_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80004b8:	f000 f8ae 	bl	8000618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80004bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c0:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <MX_TIM3_Init+0xa0>)
 80004d6:	f002 fcac 	bl	8002e32 <HAL_TIM_ConfigClockSource>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80004e0:	f000 f89a 	bl	8000618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_TIM3_Init+0xa0>)
 80004f2:	f002 fecd 	bl	8003290 <HAL_TIMEx_MasterConfigSynchronization>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80004fc:	f000 f88c 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000100 	.word	0x20000100
 800050c:	40000400 	.word	0x40000400

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <MX_GPIO_Init+0x100>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a39      	ldr	r2, [pc, #228]	; (8000610 <MX_GPIO_Init+0x100>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b37      	ldr	r3, [pc, #220]	; (8000610 <MX_GPIO_Init+0x100>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <MX_GPIO_Init+0x100>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a33      	ldr	r2, [pc, #204]	; (8000610 <MX_GPIO_Init+0x100>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <MX_GPIO_Init+0x100>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <MX_GPIO_Init+0x100>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a2d      	ldr	r2, [pc, #180]	; (8000610 <MX_GPIO_Init+0x100>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <MX_GPIO_Init+0x100>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <MX_GPIO_Init+0x100>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a27      	ldr	r2, [pc, #156]	; (8000610 <MX_GPIO_Init+0x100>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <MX_GPIO_Init+0x100>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <MX_GPIO_Init+0x100>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a21      	ldr	r2, [pc, #132]	; (8000610 <MX_GPIO_Init+0x100>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <MX_GPIO_Init+0x100>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2120      	movs	r1, #32
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fda3 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	4814      	ldr	r0, [pc, #80]	; (8000614 <MX_GPIO_Init+0x104>)
 80005c2:	f000 fbeb 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005c6:	230c      	movs	r3, #12
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d2:	2303      	movs	r3, #3
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005d6:	2307      	movs	r3, #7
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 fbda 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005e8:	2320      	movs	r3, #32
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f000 fbcb 	bl	8000d9c <HAL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	48000800 	.word	0x48000800

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	e7fe      	b.n	8000620 <Error_Handler+0x8>
	...

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_MspInit+0x44>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6613      	str	r3, [r2, #96]	; 0x60
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x44>)
 8000638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_MspInit+0x44>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6593      	str	r3, [r2, #88]	; 0x58
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x44>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0a4      	sub	sp, #144	; 0x90
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2288      	movs	r2, #136	; 0x88
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f002 ff29 	bl	80034d4 <memset>
  if(hrtc->Instance==RTC)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <HAL_RTC_MspInit+0x6c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d120      	bne.n	80006ce <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800068c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000690:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fb7a 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80006aa:	f7ff ffb5 	bl	8000618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_RTC_MspInit+0x70>)
 80006b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_RTC_MspInit+0x70>)
 80006b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2003      	movs	r0, #3
 80006c4:	f000 fb33 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 fb4c 	bl	8000d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006ce:	bf00      	nop
 80006d0:	3790      	adds	r7, #144	; 0x90
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40002800 	.word	0x40002800
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000700:	d114      	bne.n	800072c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6593      	str	r3, [r2, #88]	; 0x58
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	201c      	movs	r0, #28
 8000720:	f000 fb05 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000724:	201c      	movs	r0, #28
 8000726:	f000 fb1e 	bl	8000d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800072a:	e034      	b.n	8000796 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <HAL_TIM_Base_MspInit+0xc4>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d12f      	bne.n	8000796 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6593      	str	r3, [r2, #88]	; 0x58
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_TIM_Base_MspInit+0xc0>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000766:	2304      	movs	r3, #4
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000776:	2302      	movs	r3, #2
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <HAL_TIM_Base_MspInit+0xc8>)
 8000782:	f000 fb0b 	bl	8000d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	201d      	movs	r0, #29
 800078c:	f000 facf 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000790:	201d      	movs	r0, #29
 8000792:	f000 fae8 	bl	8000d66 <HAL_NVIC_EnableIRQ>
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40000400 	.word	0x40000400
 80007a8:	48000c00 	.word	0x48000c00

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f99e 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
		first_time_intrp = 0;
		tim3_ccr = tim3_cntr*32767 + (uint32_t) htim3.Instance->CNT;
	}
#endif
  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <RTC_WKUP_IRQHandler+0x10>)
 8000806:	f002 f895 	bl	8002934 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000090 	.word	0x20000090

08000814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM2_IRQHandler+0x10>)
 800081a:	f002 f9eb 	bl	8002bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000b4 	.word	0x200000b4

08000828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
#ifdef EXT_CLK_USE_IN_CALI

	if (!first_time_intrp){
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <TIM3_IRQHandler+0x78>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10a      	bne.n	800084a <TIM3_IRQHandler+0x22>

		first_time_intrp = 1;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <TIM3_IRQHandler+0x78>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]

		/* Start tim2 at 1st interrupt */
		HAL_TIM_Base_Start(&htim2);
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <TIM3_IRQHandler+0x7c>)
 800083c:	f002 f902 	bl	8002a44 <HAL_TIM_Base_Start>
		htim2.Instance->CNT = 0;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <TIM3_IRQHandler+0x7c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
 8000848:	e01e      	b.n	8000888 <TIM3_IRQHandler+0x60>
	}
	else{
		first_time_intrp = 0;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <TIM3_IRQHandler+0x78>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
		tim2_ccr = (uint32_t) htim2.Instance->CNT;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <TIM3_IRQHandler+0x7c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <TIM3_IRQHandler+0x80>)
 8000858:	6013      	str	r3, [r2, #0]
		if (tim2_ccr >= max_tim2_ccr){
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <TIM3_IRQHandler+0x80>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <TIM3_IRQHandler+0x84>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d303      	bcc.n	800086e <TIM3_IRQHandler+0x46>
			max_tim2_ccr = tim2_ccr;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <TIM3_IRQHandler+0x80>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <TIM3_IRQHandler+0x84>)
 800086c:	6013      	str	r3, [r2, #0]
		}
		if (tim2_ccr <= min_tim2_ccr){
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <TIM3_IRQHandler+0x80>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <TIM3_IRQHandler+0x88>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	d803      	bhi.n	8000882 <TIM3_IRQHandler+0x5a>
			min_tim2_ccr = tim2_ccr;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <TIM3_IRQHandler+0x80>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <TIM3_IRQHandler+0x88>)
 8000880:	6013      	str	r3, [r2, #0]
		}
		printf("intrp triggered.");
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <TIM3_IRQHandler+0x8c>)
 8000884:	f002 fe2e 	bl	80034e4 <iprintf>
	}
#endif
	tim3_cntr++;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <TIM3_IRQHandler+0x90>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <TIM3_IRQHandler+0x90>)
 8000892:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <TIM3_IRQHandler+0x94>)
 8000896:	f002 f9ad 	bl	8002bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000154 	.word	0x20000154
 80008a4:	200000b4 	.word	0x200000b4
 80008a8:	2000014c 	.word	0x2000014c
 80008ac:	20000150 	.word	0x20000150
 80008b0:	20000000 	.word	0x20000000
 80008b4:	08004418 	.word	0x08004418
 80008b8:	20000155 	.word	0x20000155
 80008bc:	20000100 	.word	0x20000100

080008c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e00a      	b.n	80008e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d2:	f3af 8000 	nop.w
 80008d6:	4601      	mov	r1, r0
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	60ba      	str	r2, [r7, #8]
 80008de:	b2ca      	uxtb	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbf0      	blt.n	80008d2 <_read+0x12>
  }

  return len;
 80008f0:	687b      	ldr	r3, [r7, #4]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	e009      	b.n	8000920 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf1      	blt.n	800090c <_write+0x12>
  }
  return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_close>:

int _close(int file)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095a:	605a      	str	r2, [r3, #4]
  return 0;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_isatty>:

int _isatty(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f002 fd58 	bl	8003480 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20018000 	.word	0x20018000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	20000158 	.word	0x20000158
 8000a04:	20000170 	.word	0x20000170

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 fd17 	bl	800348c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fc07 	bl	8000270 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a70:	0800450c 	.word	0x0800450c
  ldr r2, =_sbss
 8000a74:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a78:	20000170 	.word	0x20000170

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_Init+0x3c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_Init+0x3c>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f93e 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f80f 	bl	8000ac0 <HAL_InitTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f7ff fdb9 	bl	8000624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d023      	beq.n	8000b1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_InitTick+0x70>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f949 	bl	8000d82 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10f      	bne.n	8000b16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d809      	bhi.n	8000b10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f913 	bl	8000d2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_InitTick+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e001      	b.n	8000b20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000000c 	.word	0x2000000c
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000008 	.word	0x20000008

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000000c 	.word	0x2000000c
 8000b5c:	2000015c 	.word	0x2000015c

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	2000015c 	.word	0x2000015c

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000daa:	e17f      	b.n	80010ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 8171 	beq.w	80010a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d005      	beq.n	8000ddc <HAL_GPIO_Init+0x40>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d130      	bne.n	8000e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f003 0201 	and.w	r2, r3, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d118      	bne.n	8000e7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e50:	2201      	movs	r2, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	f003 0201 	and.w	r2, r3, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d017      	beq.n	8000eb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d123      	bne.n	8000f0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0203 	and.w	r2, r3, #3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 80ac 	beq.w	80010a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <HAL_GPIO_Init+0x330>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	4a5e      	ldr	r2, [pc, #376]	; (80010cc <HAL_GPIO_Init+0x330>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5a:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <HAL_GPIO_Init+0x330>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f66:	4a5a      	ldr	r2, [pc, #360]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f90:	d025      	beq.n	8000fde <HAL_GPIO_Init+0x242>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <HAL_GPIO_Init+0x338>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01f      	beq.n	8000fda <HAL_GPIO_Init+0x23e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4e      	ldr	r2, [pc, #312]	; (80010d8 <HAL_GPIO_Init+0x33c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0x23a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <HAL_GPIO_Init+0x340>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0x236>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x344>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x232>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <HAL_GPIO_Init+0x348>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x22e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4a      	ldr	r2, [pc, #296]	; (80010e8 <HAL_GPIO_Init+0x34c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x22a>
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	e00c      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff0:	4937      	ldr	r1, [pc, #220]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_GPIO_Init+0x350>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001022:	4a32      	ldr	r2, [pc, #200]	; (80010ec <HAL_GPIO_Init+0x350>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <HAL_GPIO_Init+0x350>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <HAL_GPIO_Init+0x350>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_GPIO_Init+0x350>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_GPIO_Init+0x350>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_GPIO_Init+0x350>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_GPIO_Init+0x350>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa22 f303 	lsr.w	r3, r2, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f47f ae78 	bne.w	8000dac <HAL_GPIO_Init+0x10>
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000800 	.word	0x48000800
 80010dc:	48000c00 	.word	0x48000c00
 80010e0:	48001000 	.word	0x48001000
 80010e4:	48001400 	.word	0x48001400
 80010e8:	48001800 	.word	0x48001800
 80010ec:	40010400 	.word	0x40010400

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800110c:	e002      	b.n	8001114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_PWREx_GetVoltageRange+0x18>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40007000 	.word	0x40007000

0800115c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116a:	d130      	bne.n	80011ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001178:	d038      	beq.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001188:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2232      	movs	r2, #50	; 0x32
 8001190:	fb02 f303 	mul.w	r3, r2, r3
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9b      	lsrs	r3, r3, #18
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a0:	e002      	b.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b4:	d102      	bne.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f2      	bne.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c8:	d110      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e00f      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011da:	d007      	beq.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40007000 	.word	0x40007000
 8001200:	20000004 	.word	0x20000004
 8001204:	431bde83 	.word	0x431bde83

08001208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e3ca      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121a:	4b97      	ldr	r3, [pc, #604]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001224:	4b94      	ldr	r3, [pc, #592]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80e4 	beq.w	8001404 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d007      	beq.n	8001252 <HAL_RCC_OscConfig+0x4a>
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	f040 808b 	bne.w	8001360 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b01      	cmp	r3, #1
 800124e:	f040 8087 	bne.w	8001360 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001252:	4b89      	ldr	r3, [pc, #548]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_RCC_OscConfig+0x62>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e3a2      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_RCC_OscConfig+0x7c>
 800127a:	4b7f      	ldr	r3, [pc, #508]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001282:	e005      	b.n	8001290 <HAL_RCC_OscConfig+0x88>
 8001284:	4b7c      	ldr	r3, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001290:	4293      	cmp	r3, r2
 8001292:	d223      	bcs.n	80012dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fd1d 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e383      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a8:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a72      	ldr	r2, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	496d      	ldr	r1, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	4968      	ldr	r1, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
 80012da:	e025      	b.n	8001328 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012dc:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b63      	ldr	r3, [pc, #396]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	4960      	ldr	r1, [pc, #384]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	495b      	ldr	r1, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fcdd 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e343      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001328:	f000 fc4a 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 800132c:	4602      	mov	r2, r0
 800132e:	4b52      	ldr	r3, [pc, #328]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	4950      	ldr	r1, [pc, #320]	; (800147c <HAL_RCC_OscConfig+0x274>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_RCC_OscConfig+0x278>)
 8001346:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001348:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fbb7 	bl	8000ac0 <HAL_InitTick>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d052      	beq.n	8001402 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	e327      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d032      	beq.n	80013ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001368:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a42      	ldr	r2, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001374:	f7ff fbf4 	bl	8000b60 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137c:	f7ff fbf0 	bl	8000b60 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e310      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a36      	ldr	r2, [pc, #216]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4931      	ldr	r1, [pc, #196]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	492c      	ldr	r1, [pc, #176]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e01a      	b.n	8001404 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013da:	f7ff fbc1 	bl	8000b60 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e2:	f7ff fbbd 	bl	8000b60 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e2dd      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x1da>
 8001400:	e000      	b.n	8001404 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001402:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d074      	beq.n	80014fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b08      	cmp	r3, #8
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x21a>
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d10e      	bne.n	800143a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d10b      	bne.n	800143a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d064      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d160      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e2ba      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x24a>
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e026      	b.n	80014a0 <HAL_RCC_OscConfig+0x298>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145a:	d115      	bne.n	8001488 <HAL_RCC_OscConfig+0x280>
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a05      	ldr	r2, [pc, #20]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a02      	ldr	r2, [pc, #8]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e014      	b.n	80014a0 <HAL_RCC_OscConfig+0x298>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	0800442c 	.word	0x0800442c
 8001480:	20000004 	.word	0x20000004
 8001484:	20000008 	.word	0x20000008
 8001488:	4ba0      	ldr	r3, [pc, #640]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a9f      	ldr	r2, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b9d      	ldr	r3, [pc, #628]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a9c      	ldr	r2, [pc, #624]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb5a 	bl	8000b60 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb56 	bl	8000b60 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e276      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c2:	4b92      	ldr	r3, [pc, #584]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2a8>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb46 	bl	8000b60 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fb42 	bl	8000b60 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e262      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d0>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d060      	beq.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b04      	cmp	r3, #4
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x310>
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d119      	bne.n	8001546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d116      	bne.n	8001546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	4b7c      	ldr	r3, [pc, #496]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x328>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e23f      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	4973      	ldr	r1, [pc, #460]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	e040      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d023      	beq.n	8001596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154e:	4b6f      	ldr	r3, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6e      	ldr	r2, [pc, #440]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fb01 	bl	8000b60 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff fafd 	bl	8000b60 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e21d      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001574:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	495f      	ldr	r1, [pc, #380]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
 8001594:	e018      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800159c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fadd 	bl	8000b60 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fad9 	bl	8000b60 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1f9      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d03c      	beq.n	800164e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01c      	beq.n	8001616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015dc:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e2:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fab8 	bl	8000b60 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fab4 	bl	8000b60 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1d4      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ef      	beq.n	80015f4 <HAL_RCC_OscConfig+0x3ec>
 8001614:	e01b      	b.n	800164e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	4a3b      	ldr	r2, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff fa9b 	bl	8000b60 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff fa97 	bl	8000b60 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1b7      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ef      	bne.n	800162e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80a6 	beq.w	80017a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001676:	6593      	str	r3, [r2, #88]	; 0x58
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001684:	2301      	movs	r3, #1
 8001686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d118      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a0:	f7ff fa5e 	bl	8000b60 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a8:	f7ff fa5a 	bl	8000b60 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e17a      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4d8>
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016de:	e029      	b.n	8001734 <HAL_RCC_OscConfig+0x52c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d115      	bne.n	8001714 <HAL_RCC_OscConfig+0x50c>
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x52c>
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	40007000 	.word	0x40007000
 8001714:	4b9c      	ldr	r3, [pc, #624]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	4a9b      	ldr	r2, [pc, #620]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001724:	4b98      	ldr	r3, [pc, #608]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	4a97      	ldr	r2, [pc, #604]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d016      	beq.n	800176a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff fa10 	bl	8000b60 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff fa0c 	bl	8000b60 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e12a      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175a:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ed      	beq.n	8001744 <HAL_RCC_OscConfig+0x53c>
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff f9f9 	bl	8000b60 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff f9f5 	bl	8000b60 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e113      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001788:	4b7f      	ldr	r3, [pc, #508]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ed      	bne.n	8001772 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	4a79      	ldr	r2, [pc, #484]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80017a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80fe 	beq.w	80019ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	f040 80d0 	bne.w	800195c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017bc:	4b72      	ldr	r3, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d130      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	3b01      	subs	r3, #1
 80017dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d127      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d11f      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017fc:	2a07      	cmp	r2, #7
 80017fe:	bf14      	ite	ne
 8001800:	2201      	movne	r2, #1
 8001802:	2200      	moveq	r2, #0
 8001804:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001806:	4293      	cmp	r3, r2
 8001808:	d113      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3b01      	subs	r3, #1
 8001818:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d109      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d06e      	beq.n	8001910 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d069      	beq.n	800190c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001838:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001844:	4b50      	ldr	r3, [pc, #320]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0ad      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001854:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a4b      	ldr	r2, [pc, #300]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800185a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001860:	f7ff f97e 	bl	8000b60 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f97a 	bl	8000b60 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e09a      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001896:	3a01      	subs	r2, #1
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	4311      	orrs	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018a0:	0212      	lsls	r2, r2, #8
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018a8:	0852      	lsrs	r2, r2, #1
 80018aa:	3a01      	subs	r2, #1
 80018ac:	0552      	lsls	r2, r2, #21
 80018ae:	4311      	orrs	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b4:	0852      	lsrs	r2, r2, #1
 80018b6:	3a01      	subs	r2, #1
 80018b8:	0652      	lsls	r2, r2, #25
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018c0:	0912      	lsrs	r2, r2, #4
 80018c2:	0452      	lsls	r2, r2, #17
 80018c4:	430a      	orrs	r2, r1
 80018c6:	4930      	ldr	r1, [pc, #192]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018cc:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2d      	ldr	r2, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a2a      	ldr	r2, [pc, #168]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e4:	f7ff f93c 	bl	8000b60 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f938 	bl	8000b60 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e058      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190a:	e050      	b.n	80019ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e04f      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d148      	bne.n	80019ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4a16      	ldr	r2, [pc, #88]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001932:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001934:	f7ff f914 	bl	8000b60 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f910 	bl	8000b60 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e030      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x734>
 800195a:	e028      	b.n	80019ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d023      	beq.n	80019aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f8f7 	bl	8000b60 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	e00c      	b.n	8001990 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f8f3 	bl	8000b60 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d905      	bls.n	8001990 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e013      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
 8001988:	40021000 	.word	0x40021000
 800198c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x7b0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ec      	bne.n	8001976 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_OscConfig+0x7b0>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4905      	ldr	r1, [pc, #20]	; (80019b8 <HAL_RCC_OscConfig+0x7b0>)
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x7b4>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e001      	b.n	80019ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	feeefffc 	.word	0xfeeefffc

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0e7      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b75      	ldr	r3, [pc, #468]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d910      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4970      	ldr	r1, [pc, #448]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cf      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d908      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4960      	ldr	r1, [pc, #384]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d04c      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d121      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0a6      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5e:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d115      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e09a      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a76:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e08e      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e086      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4943      	ldr	r1, [pc, #268]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa8:	f7ff f85a 	bl	8000b60 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff f856 	bl	8000b60 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e06e      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d208      	bcs.n	8001b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	492b      	ldr	r1, [pc, #172]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d210      	bcs.n	8001b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 0207 	bic.w	r2, r3, #7
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e036      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b74:	f000 f824 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	490b      	ldr	r1, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1fc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe ff91 	bl	8000ac0 <HAL_InitTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	0800442c 	.word	0x0800442c
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d11e      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e004      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d134      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d003      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0xac>
 8001c64:	e005      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c68:	617b      	str	r3, [r7, #20]
      break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6e:	617b      	str	r3, [r7, #20]
      break;
 8001c70:	e002      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	617b      	str	r3, [r7, #20]
      break;
 8001c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	3301      	adds	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	0e5b      	lsrs	r3, r3, #25
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	0800443c 	.word	0x0800443c
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200

08001cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf0:	f7ff fa26 	bl	8001140 <HAL_PWREx_GetVoltageRange>
 8001cf4:	6178      	str	r0, [r7, #20]
 8001cf6:	e014      	b.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d10:	f7ff fa16 	bl	8001140 <HAL_PWREx_GetVoltageRange>
 8001d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d28:	d10b      	bne.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d919      	bls.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2ba0      	cmp	r3, #160	; 0xa0
 8001d34:	d902      	bls.n	8001d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e013      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e010      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d902      	bls.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d48:	2303      	movs	r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e00a      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d102      	bne.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d54:	2302      	movs	r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e004      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b70      	cmp	r3, #112	; 0x70
 8001d5e:	d101      	bne.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 0207 	bic.w	r2, r3, #7
 8001d6c:	4909      	ldr	r1, [pc, #36]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da0:	2300      	movs	r3, #0
 8001da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001da4:	2300      	movs	r3, #0
 8001da6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d041      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dbc:	d02a      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dc2:	d824      	bhi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dce:	d81e      	bhi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dda:	e018      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ddc:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4a85      	ldr	r2, [pc, #532]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de8:	e015      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fabb 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001df6:	4603      	mov	r3, r0
 8001df8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dfa:	e00c      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3320      	adds	r3, #32
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fba6 	bl	8002554 <RCCEx_PLLSAI2_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0c:	e003      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	74fb      	strb	r3, [r7, #19]
      break;
 8001e12:	e000      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e16:	7cfb      	ldrb	r3, [r7, #19]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e1c:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e2a:	4973      	ldr	r1, [pc, #460]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e32:	e001      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d041      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e4c:	d02a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e52:	d824      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e58:	d008      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e5e:	d81e      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d010      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e6a:	e018      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e6c:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a61      	ldr	r2, [pc, #388]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e78:	e015      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa73 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001e86:	4603      	mov	r3, r0
 8001e88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e8a:	e00c      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb5e 	bl	8002554 <RCCEx_PLLSAI2_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e9c:	e003      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eac:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eba:	494f      	ldr	r1, [pc, #316]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ec2:	e001      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a0 	beq.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fe22 	bl	8000b60 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7fe fe1e 	bl	8000b60 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d902      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	74fb      	strb	r3, [r7, #19]
        break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d15c      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01f      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d019      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fddd 	bl	8000b60 <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fdd9 	bl	8000b60 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d902      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	74fb      	strb	r3, [r7, #19]
            break;
 8001fc0:	e006      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ec      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe6:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fee:	e009      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
 8001ff4:	e006      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002004:	7c7b      	ldrb	r3, [r7, #17]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b9e      	ldr	r3, [pc, #632]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	4a9d      	ldr	r2, [pc, #628]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002022:	4b98      	ldr	r3, [pc, #608]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002028:	f023 0203 	bic.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	4994      	ldr	r1, [pc, #592]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002044:	4b8f      	ldr	r3, [pc, #572]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f023 020c 	bic.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	498c      	ldr	r1, [pc, #560]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002066:	4b87      	ldr	r3, [pc, #540]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4983      	ldr	r1, [pc, #524]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002088:	4b7e      	ldr	r3, [pc, #504]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	497b      	ldr	r1, [pc, #492]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020aa:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b8:	4972      	ldr	r1, [pc, #456]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020cc:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	496a      	ldr	r1, [pc, #424]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ee:	4b65      	ldr	r3, [pc, #404]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	4961      	ldr	r1, [pc, #388]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002110:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	4959      	ldr	r1, [pc, #356]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	4950      	ldr	r1, [pc, #320]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	4948      	ldr	r1, [pc, #288]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002176:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	493f      	ldr	r1, [pc, #252]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d028      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002198:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	4937      	ldr	r1, [pc, #220]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b6:	d106      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b32      	ldr	r3, [pc, #200]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a31      	ldr	r2, [pc, #196]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
 80021c4:	e011      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ce:	d10c      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f8c8 	bl	800236c <RCCEx_PLLSAI1_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d028      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	491f      	ldr	r1, [pc, #124]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002214:	d106      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002220:	60d3      	str	r3, [r2, #12]
 8002222:	e011      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800222c:	d10c      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f899 	bl	800236c <RCCEx_PLLSAI1_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02b      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002272:	d109      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a02      	ldr	r2, [pc, #8]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227e:	60d3      	str	r3, [r2, #12]
 8002280:	e014      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002290:	d10c      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f867 	bl	800236c <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c6:	4928      	ldr	r1, [pc, #160]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f844 	bl	800236c <RCCEx_PLLSAI1_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	74bb      	strb	r3, [r7, #18]
 80022f2:	e011      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3320      	adds	r3, #32
 8002302:	2102      	movs	r1, #2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f925 	bl	8002554 <RCCEx_PLLSAI2_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002332:	490d      	ldr	r1, [pc, #52]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002356:	4904      	ldr	r1, [pc, #16]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800235e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000

0800236c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800237a:	4b75      	ldr	r3, [pc, #468]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d018      	beq.n	80023b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002386:	4b72      	ldr	r3, [pc, #456]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0203 	and.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d10d      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
       ||
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
       ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d047      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e044      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d018      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x86>
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d825      	bhi.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d002      	beq.n	80023ce <RCCEx_PLLSAI1_Config+0x62>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d009      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0x74>
 80023cc:	e020      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ce:	4b60      	ldr	r3, [pc, #384]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11d      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e01a      	b.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d116      	bne.n	800241a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e013      	b.n	800241a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800240e:	e006      	b.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e004      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	430b      	orrs	r3, r1
 800243c:	4944      	ldr	r1, [pc, #272]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d17d      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002448:	4b41      	ldr	r3, [pc, #260]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a40      	ldr	r2, [pc, #256]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002454:	f7fe fb84 	bl	8000b60 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800245a:	e009      	b.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800245c:	f7fe fb80 	bl	8000b60 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	73fb      	strb	r3, [r7, #15]
        break;
 800246e:	e005      	b.n	800247c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ef      	bne.n	800245c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d160      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d111      	bne.n	80024ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6892      	ldr	r2, [r2, #8]
 8002498:	0211      	lsls	r1, r2, #8
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	0912      	lsrs	r2, r2, #4
 80024a0:	0452      	lsls	r2, r2, #17
 80024a2:	430a      	orrs	r2, r1
 80024a4:	492a      	ldr	r1, [pc, #168]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	610b      	str	r3, [r1, #16]
 80024aa:	e027      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d112      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6892      	ldr	r2, [r2, #8]
 80024c2:	0211      	lsls	r1, r2, #8
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6912      	ldr	r2, [r2, #16]
 80024c8:	0852      	lsrs	r2, r2, #1
 80024ca:	3a01      	subs	r2, #1
 80024cc:	0552      	lsls	r2, r2, #21
 80024ce:	430a      	orrs	r2, r1
 80024d0:	491f      	ldr	r1, [pc, #124]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	610b      	str	r3, [r1, #16]
 80024d6:	e011      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6892      	ldr	r2, [r2, #8]
 80024e8:	0211      	lsls	r1, r2, #8
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6952      	ldr	r2, [r2, #20]
 80024ee:	0852      	lsrs	r2, r2, #1
 80024f0:	3a01      	subs	r2, #1
 80024f2:	0652      	lsls	r2, r2, #25
 80024f4:	430a      	orrs	r2, r1
 80024f6:	4916      	ldr	r1, [pc, #88]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002506:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe fb2a 	bl	8000b60 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800250e:	e009      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002510:	f7fe fb26 	bl	8000b60 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d902      	bls.n	8002524 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	73fb      	strb	r3, [r7, #15]
          break;
 8002522:	e005      	b.n	8002530 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ef      	beq.n	8002510 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	4904      	ldr	r1, [pc, #16]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000

08002554 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002562:	4b6a      	ldr	r3, [pc, #424]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d018      	beq.n	80025a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800256e:	4b67      	ldr	r3, [pc, #412]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d10d      	bne.n	800259a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
       ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002586:	4b61      	ldr	r3, [pc, #388]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
       ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d047      	beq.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e044      	b.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d018      	beq.n	80025da <RCCEx_PLLSAI2_Config+0x86>
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d825      	bhi.n	80025f8 <RCCEx_PLLSAI2_Config+0xa4>
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d002      	beq.n	80025b6 <RCCEx_PLLSAI2_Config+0x62>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d009      	beq.n	80025c8 <RCCEx_PLLSAI2_Config+0x74>
 80025b4:	e020      	b.n	80025f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025b6:	4b55      	ldr	r3, [pc, #340]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11d      	bne.n	80025fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c6:	e01a      	b.n	80025fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d116      	bne.n	8002602 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d8:	e013      	b.n	8002602 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025da:	4b4c      	ldr	r3, [pc, #304]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025e6:	4b49      	ldr	r3, [pc, #292]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025f6:	e006      	b.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      break;
 80025fc:	e004      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002606:	bf00      	nop
    }

    if(status == HAL_OK)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800260e:	4b3f      	ldr	r3, [pc, #252]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	430b      	orrs	r3, r1
 8002624:	4939      	ldr	r1, [pc, #228]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d167      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a35      	ldr	r2, [pc, #212]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe fa90 	bl	8000b60 <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002642:	e009      	b.n	8002658 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002644:	f7fe fa8c 	bl	8000b60 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	73fb      	strb	r3, [r7, #15]
        break;
 8002656:	e005      	b.n	8002664 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ef      	bne.n	8002644 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d14a      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6892      	ldr	r2, [r2, #8]
 8002680:	0211      	lsls	r1, r2, #8
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	0912      	lsrs	r2, r2, #4
 8002688:	0452      	lsls	r2, r2, #17
 800268a:	430a      	orrs	r2, r1
 800268c:	491f      	ldr	r1, [pc, #124]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	614b      	str	r3, [r1, #20]
 8002692:	e011      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6912      	ldr	r2, [r2, #16]
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0652      	lsls	r2, r2, #25
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4916      	ldr	r1, [pc, #88]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe fa4c 	bl	8000b60 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ca:	e009      	b.n	80026e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026cc:	f7fe fa48 	bl	8000b60 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	73fb      	strb	r3, [r7, #15]
          break;
 80026de:	e005      	b.n	80026ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4904      	ldr	r1, [pc, #16]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d06c      	beq.n	80027fc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fd ff98 	bl	800066c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	22ca      	movs	r2, #202	; 0xca
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2253      	movs	r2, #83	; 0x53
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f87c 	bl	8002852 <RTC_EnterInitMode>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d14b      	bne.n	80027fc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002776:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6919      	ldr	r1, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	041a      	lsls	r2, r3, #16
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f87f 	bl	80028b8 <RTC_ExitInitMode>
 80027ba:	4603      	mov	r3, r0
 80027bc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11b      	bne.n	80027fc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0203 	bic.w	r2, r2, #3
 80027d2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	22ff      	movs	r2, #255	; 0xff
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800281c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800281e:	f7fe f99f 	bl	8000b60 <HAL_GetTick>
 8002822:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002824:	e009      	b.n	800283a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002826:	f7fe f99b 	bl	8000b60 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002834:	d901      	bls.n	800283a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e007      	b.n	800284a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ee      	beq.n	8002826 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d120      	bne.n	80028ae <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002876:	f7fe f973 	bl	8000b60 <HAL_GetTick>
 800287a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800287c:	e00d      	b.n	800289a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800287e:	f7fe f96f 	bl	8000b60 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800288c:	d905      	bls.n	800289a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2203      	movs	r2, #3
 8002896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <RTC_EnterInitMode+0x5c>
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d1e7      	bne.n	800287e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80028c4:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <RTC_ExitInitMode+0x78>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <RTC_ExitInitMode+0x78>)
 80028ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ce:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <RTC_ExitInitMode+0x78>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff92 	bl	8002806 <HAL_RTC_WaitForSynchro>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01e      	beq.n	8002926 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2203      	movs	r2, #3
 80028ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e017      	b.n	8002926 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <RTC_ExitInitMode+0x78>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <RTC_ExitInitMode+0x78>)
 80028fc:	f023 0320 	bic.w	r3, r3, #32
 8002900:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ff7f 	bl	8002806 <HAL_RTC_WaitForSynchro>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2203      	movs	r2, #3
 8002912:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <RTC_ExitInitMode+0x78>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <RTC_ExitInitMode+0x78>)
 8002920:	f043 0320 	orr.w	r3, r3, #32
 8002924:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002926:	7bfb      	ldrb	r3, [r7, #15]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40002800 	.word	0x40002800

08002934 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800293e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002942:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002962:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f80b 	bl	8002980 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e049      	b.n	8002a3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fd fe90 	bl	80006e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f000 fb28 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d001      	beq.n	8002a5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e047      	b.n	8002aec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <HAL_TIM_Base_Start+0xb4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <HAL_TIM_Base_Start+0x66>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a76:	d018      	beq.n	8002aaa <HAL_TIM_Base_Start+0x66>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_TIM_Base_Start+0xb8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_TIM_Base_Start+0x66>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_TIM_Base_Start+0xbc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIM_Base_Start+0x66>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_TIM_Base_Start+0xc0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_TIM_Base_Start+0x66>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_TIM_Base_Start+0xc4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIM_Base_Start+0x66>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_TIM_Base_Start+0xc8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d115      	bne.n	8002ad6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_TIM_Base_Start+0xcc>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d015      	beq.n	8002ae8 <HAL_TIM_Base_Start+0xa4>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d011      	beq.n	8002ae8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad4:	e008      	b.n	8002ae8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0201 	orr.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e000      	b.n	8002aea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40013400 	.word	0x40013400
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	00010007 	.word	0x00010007

08002b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d001      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e04f      	b.n	8002bcc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01d      	beq.n	8002b8a <HAL_TIM_Base_Start_IT+0x76>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b56:	d018      	beq.n	8002b8a <HAL_TIM_Base_Start_IT+0x76>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_TIM_Base_Start_IT+0x76>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <HAL_TIM_Base_Start_IT+0x76>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_TIM_Base_Start_IT+0x76>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_TIM_Base_Start_IT+0x76>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_TIM_Base_Start_IT+0xd8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d115      	bne.n	8002bb6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d015      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0xb4>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d011      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	e008      	b.n	8002bc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e000      	b.n	8002bca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40000c00 	.word	0x40000c00
 8002be8:	40013400 	.word	0x40013400
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	00010007 	.word	0x00010007

08002bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d122      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d11b      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0202 	mvn.w	r2, #2
 8002c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f9d8 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f9ca 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9db 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d122      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0204 	mvn.w	r2, #4
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9ae 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f9a0 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f9b1 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0208 	mvn.w	r2, #8
 8002cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f984 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f976 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f987 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0210 	mvn.w	r2, #16
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2208      	movs	r2, #8
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f95a 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f94c 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f95d 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0201 	mvn.w	r2, #1
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f926 	bl	8002fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	2b80      	cmp	r3, #128	; 0x80
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d90:	2b80      	cmp	r3, #128	; 0x80
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fb5a 	bl	8003458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db2:	d10e      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fb4d 	bl	800346c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d10e      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f90b 	bl	8003014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d10e      	bne.n	8002e2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d107      	bne.n	8002e2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f06f 0220 	mvn.w	r2, #32
 8002e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fb0d 	bl	8003444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_ConfigClockSource+0x1c>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0b6      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x18a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8a:	d03e      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xd8>
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e90:	f200 8087 	bhi.w	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e98:	f000 8086 	beq.w	8002fa8 <HAL_TIM_ConfigClockSource+0x176>
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d87f      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002ea2:	2b70      	cmp	r3, #112	; 0x70
 8002ea4:	d01a      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0xaa>
 8002ea6:	2b70      	cmp	r3, #112	; 0x70
 8002ea8:	d87b      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002eaa:	2b60      	cmp	r3, #96	; 0x60
 8002eac:	d050      	beq.n	8002f50 <HAL_TIM_ConfigClockSource+0x11e>
 8002eae:	2b60      	cmp	r3, #96	; 0x60
 8002eb0:	d877      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002eb2:	2b50      	cmp	r3, #80	; 0x50
 8002eb4:	d03c      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0xfe>
 8002eb6:	2b50      	cmp	r3, #80	; 0x50
 8002eb8:	d873      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d058      	beq.n	8002f70 <HAL_TIM_ConfigClockSource+0x13e>
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d86f      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002ec2:	2b30      	cmp	r3, #48	; 0x30
 8002ec4:	d064      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x15e>
 8002ec6:	2b30      	cmp	r3, #48	; 0x30
 8002ec8:	d86b      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d060      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x15e>
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d867      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d05c      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x15e>
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d05a      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x15e>
 8002eda:	e062      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f000 f9b0 	bl	8003250 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002efe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
      break;
 8002f08:	e04f      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f000 f999 	bl	8003250 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f2c:	609a      	str	r2, [r3, #8]
      break;
 8002f2e:	e03c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f000 f90d 	bl	800315c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2150      	movs	r1, #80	; 0x50
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f966 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002f4e:	e02c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f000 f92c 	bl	80031ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2160      	movs	r1, #96	; 0x60
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f956 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002f6e:	e01c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f000 f8ed 	bl	800315c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2140      	movs	r1, #64	; 0x40
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f946 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002f8e:	e00c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f000 f93d 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e003      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa6:	e000      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002fa8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a40      	ldr	r2, [pc, #256]	; (800313c <TIM_Base_SetConfig+0x114>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d00f      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <TIM_Base_SetConfig+0x118>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <TIM_Base_SetConfig+0x11c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3b      	ldr	r2, [pc, #236]	; (8003148 <TIM_Base_SetConfig+0x120>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3a      	ldr	r2, [pc, #232]	; (800314c <TIM_Base_SetConfig+0x124>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2f      	ldr	r2, [pc, #188]	; (800313c <TIM_Base_SetConfig+0x114>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d01b      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <TIM_Base_SetConfig+0x118>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d017      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <TIM_Base_SetConfig+0x11c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <TIM_Base_SetConfig+0x120>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a29      	ldr	r2, [pc, #164]	; (800314c <TIM_Base_SetConfig+0x124>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a28      	ldr	r2, [pc, #160]	; (8003150 <TIM_Base_SetConfig+0x128>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <TIM_Base_SetConfig+0x12c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a26      	ldr	r2, [pc, #152]	; (8003158 <TIM_Base_SetConfig+0x130>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <TIM_Base_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00f      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a12      	ldr	r2, [pc, #72]	; (800314c <TIM_Base_SetConfig+0x124>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00b      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a11      	ldr	r2, [pc, #68]	; (8003150 <TIM_Base_SetConfig+0x128>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <TIM_Base_SetConfig+0x12c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <TIM_Base_SetConfig+0x130>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d103      	bne.n	8003128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	615a      	str	r2, [r3, #20]
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800
 8003148:	40000c00 	.word	0x40000c00
 800314c:	40013400 	.word	0x40013400
 8003150:	40014000 	.word	0x40014000
 8003154:	40014400 	.word	0x40014400
 8003158:	40014800 	.word	0x40014800

0800315c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0201 	bic.w	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f023 030a 	bic.w	r3, r3, #10
 8003198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b087      	sub	sp, #28
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0210 	bic.w	r2, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	031b      	lsls	r3, r3, #12
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	f043 0307 	orr.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800326a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	021a      	lsls	r2, r3, #8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	431a      	orrs	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e068      	b.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2e      	ldr	r2, [pc, #184]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2d      	ldr	r2, [pc, #180]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01d      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d018      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a13      	ldr	r2, [pc, #76]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10c      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4313      	orrs	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40013400 	.word	0x40013400
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40014000 	.word	0x40014000

080033a0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_TIMEx_RemapConfig+0x18>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e038      	b.n	800342a <HAL_TIMEx_RemapConfig+0x8a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <HAL_TIMEx_RemapConfig+0x98>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00e      	beq.n	80033e8 <HAL_TIMEx_RemapConfig+0x48>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d009      	beq.n	80033e8 <HAL_TIMEx_RemapConfig+0x48>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_TIMEx_RemapConfig+0x9c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <HAL_TIMEx_RemapConfig+0x48>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a17      	ldr	r2, [pc, #92]	; (8003440 <HAL_TIMEx_RemapConfig+0xa0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d111      	bne.n	800340c <HAL_TIMEx_RemapConfig+0x6c>
  {
    tmpor2 = htim->Instance->OR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ee:	60fb      	str	r3, [r7, #12]
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

    /* Set TIMx_OR2 */
    htim->Instance->OR2 = tmpor2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Set other remapping capabilities */
  tmpor1 = Remap;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	60bb      	str	r3, [r7, #8]
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 8003416:	60bb      	str	r3, [r7, #8]

  /* Set TIMx_OR1 */
  htim->Instance->OR1 = tmpor1;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40000400 	.word	0x40000400
 8003440:	40013400 	.word	0x40013400

08003444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <__errno>:
 8003480:	4b01      	ldr	r3, [pc, #4]	; (8003488 <__errno+0x8>)
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000010 	.word	0x20000010

0800348c <__libc_init_array>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	4d0d      	ldr	r5, [pc, #52]	; (80034c4 <__libc_init_array+0x38>)
 8003490:	4c0d      	ldr	r4, [pc, #52]	; (80034c8 <__libc_init_array+0x3c>)
 8003492:	1b64      	subs	r4, r4, r5
 8003494:	10a4      	asrs	r4, r4, #2
 8003496:	2600      	movs	r6, #0
 8003498:	42a6      	cmp	r6, r4
 800349a:	d109      	bne.n	80034b0 <__libc_init_array+0x24>
 800349c:	4d0b      	ldr	r5, [pc, #44]	; (80034cc <__libc_init_array+0x40>)
 800349e:	4c0c      	ldr	r4, [pc, #48]	; (80034d0 <__libc_init_array+0x44>)
 80034a0:	f000 ffae 	bl	8004400 <_init>
 80034a4:	1b64      	subs	r4, r4, r5
 80034a6:	10a4      	asrs	r4, r4, #2
 80034a8:	2600      	movs	r6, #0
 80034aa:	42a6      	cmp	r6, r4
 80034ac:	d105      	bne.n	80034ba <__libc_init_array+0x2e>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b4:	4798      	blx	r3
 80034b6:	3601      	adds	r6, #1
 80034b8:	e7ee      	b.n	8003498 <__libc_init_array+0xc>
 80034ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80034be:	4798      	blx	r3
 80034c0:	3601      	adds	r6, #1
 80034c2:	e7f2      	b.n	80034aa <__libc_init_array+0x1e>
 80034c4:	08004504 	.word	0x08004504
 80034c8:	08004504 	.word	0x08004504
 80034cc:	08004504 	.word	0x08004504
 80034d0:	08004508 	.word	0x08004508

080034d4 <memset>:
 80034d4:	4402      	add	r2, r0
 80034d6:	4603      	mov	r3, r0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <iprintf>:
 80034e4:	b40f      	push	{r0, r1, r2, r3}
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <iprintf+0x2c>)
 80034e8:	b513      	push	{r0, r1, r4, lr}
 80034ea:	681c      	ldr	r4, [r3, #0]
 80034ec:	b124      	cbz	r4, 80034f8 <iprintf+0x14>
 80034ee:	69a3      	ldr	r3, [r4, #24]
 80034f0:	b913      	cbnz	r3, 80034f8 <iprintf+0x14>
 80034f2:	4620      	mov	r0, r4
 80034f4:	f000 f866 	bl	80035c4 <__sinit>
 80034f8:	ab05      	add	r3, sp, #20
 80034fa:	9a04      	ldr	r2, [sp, #16]
 80034fc:	68a1      	ldr	r1, [r4, #8]
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	4620      	mov	r0, r4
 8003502:	f000 f9bd 	bl	8003880 <_vfiprintf_r>
 8003506:	b002      	add	sp, #8
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800350c:	b004      	add	sp, #16
 800350e:	4770      	bx	lr
 8003510:	20000010 	.word	0x20000010

08003514 <std>:
 8003514:	2300      	movs	r3, #0
 8003516:	b510      	push	{r4, lr}
 8003518:	4604      	mov	r4, r0
 800351a:	e9c0 3300 	strd	r3, r3, [r0]
 800351e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003522:	6083      	str	r3, [r0, #8]
 8003524:	8181      	strh	r1, [r0, #12]
 8003526:	6643      	str	r3, [r0, #100]	; 0x64
 8003528:	81c2      	strh	r2, [r0, #14]
 800352a:	6183      	str	r3, [r0, #24]
 800352c:	4619      	mov	r1, r3
 800352e:	2208      	movs	r2, #8
 8003530:	305c      	adds	r0, #92	; 0x5c
 8003532:	f7ff ffcf 	bl	80034d4 <memset>
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <std+0x38>)
 8003538:	6263      	str	r3, [r4, #36]	; 0x24
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <std+0x3c>)
 800353c:	62a3      	str	r3, [r4, #40]	; 0x28
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <std+0x40>)
 8003540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <std+0x44>)
 8003544:	6224      	str	r4, [r4, #32]
 8003546:	6323      	str	r3, [r4, #48]	; 0x30
 8003548:	bd10      	pop	{r4, pc}
 800354a:	bf00      	nop
 800354c:	08003e29 	.word	0x08003e29
 8003550:	08003e4b 	.word	0x08003e4b
 8003554:	08003e83 	.word	0x08003e83
 8003558:	08003ea7 	.word	0x08003ea7

0800355c <_cleanup_r>:
 800355c:	4901      	ldr	r1, [pc, #4]	; (8003564 <_cleanup_r+0x8>)
 800355e:	f000 b8af 	b.w	80036c0 <_fwalk_reent>
 8003562:	bf00      	nop
 8003564:	08004181 	.word	0x08004181

08003568 <__sfmoreglue>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	2268      	movs	r2, #104	; 0x68
 800356c:	1e4d      	subs	r5, r1, #1
 800356e:	4355      	muls	r5, r2
 8003570:	460e      	mov	r6, r1
 8003572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003576:	f000 f8e5 	bl	8003744 <_malloc_r>
 800357a:	4604      	mov	r4, r0
 800357c:	b140      	cbz	r0, 8003590 <__sfmoreglue+0x28>
 800357e:	2100      	movs	r1, #0
 8003580:	e9c0 1600 	strd	r1, r6, [r0]
 8003584:	300c      	adds	r0, #12
 8003586:	60a0      	str	r0, [r4, #8]
 8003588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800358c:	f7ff ffa2 	bl	80034d4 <memset>
 8003590:	4620      	mov	r0, r4
 8003592:	bd70      	pop	{r4, r5, r6, pc}

08003594 <__sfp_lock_acquire>:
 8003594:	4801      	ldr	r0, [pc, #4]	; (800359c <__sfp_lock_acquire+0x8>)
 8003596:	f000 b8b3 	b.w	8003700 <__retarget_lock_acquire_recursive>
 800359a:	bf00      	nop
 800359c:	20000161 	.word	0x20000161

080035a0 <__sfp_lock_release>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__sfp_lock_release+0x8>)
 80035a2:	f000 b8ae 	b.w	8003702 <__retarget_lock_release_recursive>
 80035a6:	bf00      	nop
 80035a8:	20000161 	.word	0x20000161

080035ac <__sinit_lock_acquire>:
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <__sinit_lock_acquire+0x8>)
 80035ae:	f000 b8a7 	b.w	8003700 <__retarget_lock_acquire_recursive>
 80035b2:	bf00      	nop
 80035b4:	20000162 	.word	0x20000162

080035b8 <__sinit_lock_release>:
 80035b8:	4801      	ldr	r0, [pc, #4]	; (80035c0 <__sinit_lock_release+0x8>)
 80035ba:	f000 b8a2 	b.w	8003702 <__retarget_lock_release_recursive>
 80035be:	bf00      	nop
 80035c0:	20000162 	.word	0x20000162

080035c4 <__sinit>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	4604      	mov	r4, r0
 80035c8:	f7ff fff0 	bl	80035ac <__sinit_lock_acquire>
 80035cc:	69a3      	ldr	r3, [r4, #24]
 80035ce:	b11b      	cbz	r3, 80035d8 <__sinit+0x14>
 80035d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d4:	f7ff bff0 	b.w	80035b8 <__sinit_lock_release>
 80035d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035dc:	6523      	str	r3, [r4, #80]	; 0x50
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <__sinit+0x68>)
 80035e0:	4a13      	ldr	r2, [pc, #76]	; (8003630 <__sinit+0x6c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	bf04      	itt	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	61a3      	streq	r3, [r4, #24]
 80035ee:	4620      	mov	r0, r4
 80035f0:	f000 f820 	bl	8003634 <__sfp>
 80035f4:	6060      	str	r0, [r4, #4]
 80035f6:	4620      	mov	r0, r4
 80035f8:	f000 f81c 	bl	8003634 <__sfp>
 80035fc:	60a0      	str	r0, [r4, #8]
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 f818 	bl	8003634 <__sfp>
 8003604:	2200      	movs	r2, #0
 8003606:	60e0      	str	r0, [r4, #12]
 8003608:	2104      	movs	r1, #4
 800360a:	6860      	ldr	r0, [r4, #4]
 800360c:	f7ff ff82 	bl	8003514 <std>
 8003610:	68a0      	ldr	r0, [r4, #8]
 8003612:	2201      	movs	r2, #1
 8003614:	2109      	movs	r1, #9
 8003616:	f7ff ff7d 	bl	8003514 <std>
 800361a:	68e0      	ldr	r0, [r4, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	2112      	movs	r1, #18
 8003620:	f7ff ff78 	bl	8003514 <std>
 8003624:	2301      	movs	r3, #1
 8003626:	61a3      	str	r3, [r4, #24]
 8003628:	e7d2      	b.n	80035d0 <__sinit+0xc>
 800362a:	bf00      	nop
 800362c:	0800446c 	.word	0x0800446c
 8003630:	0800355d 	.word	0x0800355d

08003634 <__sfp>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	4607      	mov	r7, r0
 8003638:	f7ff ffac 	bl	8003594 <__sfp_lock_acquire>
 800363c:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <__sfp+0x84>)
 800363e:	681e      	ldr	r6, [r3, #0]
 8003640:	69b3      	ldr	r3, [r6, #24]
 8003642:	b913      	cbnz	r3, 800364a <__sfp+0x16>
 8003644:	4630      	mov	r0, r6
 8003646:	f7ff ffbd 	bl	80035c4 <__sinit>
 800364a:	3648      	adds	r6, #72	; 0x48
 800364c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003650:	3b01      	subs	r3, #1
 8003652:	d503      	bpl.n	800365c <__sfp+0x28>
 8003654:	6833      	ldr	r3, [r6, #0]
 8003656:	b30b      	cbz	r3, 800369c <__sfp+0x68>
 8003658:	6836      	ldr	r6, [r6, #0]
 800365a:	e7f7      	b.n	800364c <__sfp+0x18>
 800365c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003660:	b9d5      	cbnz	r5, 8003698 <__sfp+0x64>
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <__sfp+0x88>)
 8003664:	60e3      	str	r3, [r4, #12]
 8003666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800366a:	6665      	str	r5, [r4, #100]	; 0x64
 800366c:	f000 f847 	bl	80036fe <__retarget_lock_init_recursive>
 8003670:	f7ff ff96 	bl	80035a0 <__sfp_lock_release>
 8003674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800367c:	6025      	str	r5, [r4, #0]
 800367e:	61a5      	str	r5, [r4, #24]
 8003680:	2208      	movs	r2, #8
 8003682:	4629      	mov	r1, r5
 8003684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003688:	f7ff ff24 	bl	80034d4 <memset>
 800368c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003694:	4620      	mov	r0, r4
 8003696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003698:	3468      	adds	r4, #104	; 0x68
 800369a:	e7d9      	b.n	8003650 <__sfp+0x1c>
 800369c:	2104      	movs	r1, #4
 800369e:	4638      	mov	r0, r7
 80036a0:	f7ff ff62 	bl	8003568 <__sfmoreglue>
 80036a4:	4604      	mov	r4, r0
 80036a6:	6030      	str	r0, [r6, #0]
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d1d5      	bne.n	8003658 <__sfp+0x24>
 80036ac:	f7ff ff78 	bl	80035a0 <__sfp_lock_release>
 80036b0:	230c      	movs	r3, #12
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	e7ee      	b.n	8003694 <__sfp+0x60>
 80036b6:	bf00      	nop
 80036b8:	0800446c 	.word	0x0800446c
 80036bc:	ffff0001 	.word	0xffff0001

080036c0 <_fwalk_reent>:
 80036c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036c4:	4606      	mov	r6, r0
 80036c6:	4688      	mov	r8, r1
 80036c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036cc:	2700      	movs	r7, #0
 80036ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036d2:	f1b9 0901 	subs.w	r9, r9, #1
 80036d6:	d505      	bpl.n	80036e4 <_fwalk_reent+0x24>
 80036d8:	6824      	ldr	r4, [r4, #0]
 80036da:	2c00      	cmp	r4, #0
 80036dc:	d1f7      	bne.n	80036ce <_fwalk_reent+0xe>
 80036de:	4638      	mov	r0, r7
 80036e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036e4:	89ab      	ldrh	r3, [r5, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d907      	bls.n	80036fa <_fwalk_reent+0x3a>
 80036ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036ee:	3301      	adds	r3, #1
 80036f0:	d003      	beq.n	80036fa <_fwalk_reent+0x3a>
 80036f2:	4629      	mov	r1, r5
 80036f4:	4630      	mov	r0, r6
 80036f6:	47c0      	blx	r8
 80036f8:	4307      	orrs	r7, r0
 80036fa:	3568      	adds	r5, #104	; 0x68
 80036fc:	e7e9      	b.n	80036d2 <_fwalk_reent+0x12>

080036fe <__retarget_lock_init_recursive>:
 80036fe:	4770      	bx	lr

08003700 <__retarget_lock_acquire_recursive>:
 8003700:	4770      	bx	lr

08003702 <__retarget_lock_release_recursive>:
 8003702:	4770      	bx	lr

08003704 <sbrk_aligned>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4e0e      	ldr	r6, [pc, #56]	; (8003740 <sbrk_aligned+0x3c>)
 8003708:	460c      	mov	r4, r1
 800370a:	6831      	ldr	r1, [r6, #0]
 800370c:	4605      	mov	r5, r0
 800370e:	b911      	cbnz	r1, 8003716 <sbrk_aligned+0x12>
 8003710:	f000 fb7a 	bl	8003e08 <_sbrk_r>
 8003714:	6030      	str	r0, [r6, #0]
 8003716:	4621      	mov	r1, r4
 8003718:	4628      	mov	r0, r5
 800371a:	f000 fb75 	bl	8003e08 <_sbrk_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d00a      	beq.n	8003738 <sbrk_aligned+0x34>
 8003722:	1cc4      	adds	r4, r0, #3
 8003724:	f024 0403 	bic.w	r4, r4, #3
 8003728:	42a0      	cmp	r0, r4
 800372a:	d007      	beq.n	800373c <sbrk_aligned+0x38>
 800372c:	1a21      	subs	r1, r4, r0
 800372e:	4628      	mov	r0, r5
 8003730:	f000 fb6a 	bl	8003e08 <_sbrk_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d101      	bne.n	800373c <sbrk_aligned+0x38>
 8003738:	f04f 34ff 	mov.w	r4, #4294967295
 800373c:	4620      	mov	r0, r4
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	20000168 	.word	0x20000168

08003744 <_malloc_r>:
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	1ccd      	adds	r5, r1, #3
 800374a:	f025 0503 	bic.w	r5, r5, #3
 800374e:	3508      	adds	r5, #8
 8003750:	2d0c      	cmp	r5, #12
 8003752:	bf38      	it	cc
 8003754:	250c      	movcc	r5, #12
 8003756:	2d00      	cmp	r5, #0
 8003758:	4607      	mov	r7, r0
 800375a:	db01      	blt.n	8003760 <_malloc_r+0x1c>
 800375c:	42a9      	cmp	r1, r5
 800375e:	d905      	bls.n	800376c <_malloc_r+0x28>
 8003760:	230c      	movs	r3, #12
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	2600      	movs	r6, #0
 8003766:	4630      	mov	r0, r6
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376c:	4e2e      	ldr	r6, [pc, #184]	; (8003828 <_malloc_r+0xe4>)
 800376e:	f000 fdbb 	bl	80042e8 <__malloc_lock>
 8003772:	6833      	ldr	r3, [r6, #0]
 8003774:	461c      	mov	r4, r3
 8003776:	bb34      	cbnz	r4, 80037c6 <_malloc_r+0x82>
 8003778:	4629      	mov	r1, r5
 800377a:	4638      	mov	r0, r7
 800377c:	f7ff ffc2 	bl	8003704 <sbrk_aligned>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	4604      	mov	r4, r0
 8003784:	d14d      	bne.n	8003822 <_malloc_r+0xde>
 8003786:	6834      	ldr	r4, [r6, #0]
 8003788:	4626      	mov	r6, r4
 800378a:	2e00      	cmp	r6, #0
 800378c:	d140      	bne.n	8003810 <_malloc_r+0xcc>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	4631      	mov	r1, r6
 8003792:	4638      	mov	r0, r7
 8003794:	eb04 0803 	add.w	r8, r4, r3
 8003798:	f000 fb36 	bl	8003e08 <_sbrk_r>
 800379c:	4580      	cmp	r8, r0
 800379e:	d13a      	bne.n	8003816 <_malloc_r+0xd2>
 80037a0:	6821      	ldr	r1, [r4, #0]
 80037a2:	3503      	adds	r5, #3
 80037a4:	1a6d      	subs	r5, r5, r1
 80037a6:	f025 0503 	bic.w	r5, r5, #3
 80037aa:	3508      	adds	r5, #8
 80037ac:	2d0c      	cmp	r5, #12
 80037ae:	bf38      	it	cc
 80037b0:	250c      	movcc	r5, #12
 80037b2:	4629      	mov	r1, r5
 80037b4:	4638      	mov	r0, r7
 80037b6:	f7ff ffa5 	bl	8003704 <sbrk_aligned>
 80037ba:	3001      	adds	r0, #1
 80037bc:	d02b      	beq.n	8003816 <_malloc_r+0xd2>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	442b      	add	r3, r5
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	e00e      	b.n	80037e4 <_malloc_r+0xa0>
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	1b52      	subs	r2, r2, r5
 80037ca:	d41e      	bmi.n	800380a <_malloc_r+0xc6>
 80037cc:	2a0b      	cmp	r2, #11
 80037ce:	d916      	bls.n	80037fe <_malloc_r+0xba>
 80037d0:	1961      	adds	r1, r4, r5
 80037d2:	42a3      	cmp	r3, r4
 80037d4:	6025      	str	r5, [r4, #0]
 80037d6:	bf18      	it	ne
 80037d8:	6059      	strne	r1, [r3, #4]
 80037da:	6863      	ldr	r3, [r4, #4]
 80037dc:	bf08      	it	eq
 80037de:	6031      	streq	r1, [r6, #0]
 80037e0:	5162      	str	r2, [r4, r5]
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	4638      	mov	r0, r7
 80037e6:	f104 060b 	add.w	r6, r4, #11
 80037ea:	f000 fd83 	bl	80042f4 <__malloc_unlock>
 80037ee:	f026 0607 	bic.w	r6, r6, #7
 80037f2:	1d23      	adds	r3, r4, #4
 80037f4:	1af2      	subs	r2, r6, r3
 80037f6:	d0b6      	beq.n	8003766 <_malloc_r+0x22>
 80037f8:	1b9b      	subs	r3, r3, r6
 80037fa:	50a3      	str	r3, [r4, r2]
 80037fc:	e7b3      	b.n	8003766 <_malloc_r+0x22>
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	42a3      	cmp	r3, r4
 8003802:	bf0c      	ite	eq
 8003804:	6032      	streq	r2, [r6, #0]
 8003806:	605a      	strne	r2, [r3, #4]
 8003808:	e7ec      	b.n	80037e4 <_malloc_r+0xa0>
 800380a:	4623      	mov	r3, r4
 800380c:	6864      	ldr	r4, [r4, #4]
 800380e:	e7b2      	b.n	8003776 <_malloc_r+0x32>
 8003810:	4634      	mov	r4, r6
 8003812:	6876      	ldr	r6, [r6, #4]
 8003814:	e7b9      	b.n	800378a <_malloc_r+0x46>
 8003816:	230c      	movs	r3, #12
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	4638      	mov	r0, r7
 800381c:	f000 fd6a 	bl	80042f4 <__malloc_unlock>
 8003820:	e7a1      	b.n	8003766 <_malloc_r+0x22>
 8003822:	6025      	str	r5, [r4, #0]
 8003824:	e7de      	b.n	80037e4 <_malloc_r+0xa0>
 8003826:	bf00      	nop
 8003828:	20000164 	.word	0x20000164

0800382c <__sfputc_r>:
 800382c:	6893      	ldr	r3, [r2, #8]
 800382e:	3b01      	subs	r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	b410      	push	{r4}
 8003834:	6093      	str	r3, [r2, #8]
 8003836:	da08      	bge.n	800384a <__sfputc_r+0x1e>
 8003838:	6994      	ldr	r4, [r2, #24]
 800383a:	42a3      	cmp	r3, r4
 800383c:	db01      	blt.n	8003842 <__sfputc_r+0x16>
 800383e:	290a      	cmp	r1, #10
 8003840:	d103      	bne.n	800384a <__sfputc_r+0x1e>
 8003842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003846:	f000 bb33 	b.w	8003eb0 <__swbuf_r>
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	1c58      	adds	r0, r3, #1
 800384e:	6010      	str	r0, [r2, #0]
 8003850:	7019      	strb	r1, [r3, #0]
 8003852:	4608      	mov	r0, r1
 8003854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003858:	4770      	bx	lr

0800385a <__sfputs_r>:
 800385a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385c:	4606      	mov	r6, r0
 800385e:	460f      	mov	r7, r1
 8003860:	4614      	mov	r4, r2
 8003862:	18d5      	adds	r5, r2, r3
 8003864:	42ac      	cmp	r4, r5
 8003866:	d101      	bne.n	800386c <__sfputs_r+0x12>
 8003868:	2000      	movs	r0, #0
 800386a:	e007      	b.n	800387c <__sfputs_r+0x22>
 800386c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003870:	463a      	mov	r2, r7
 8003872:	4630      	mov	r0, r6
 8003874:	f7ff ffda 	bl	800382c <__sfputc_r>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d1f3      	bne.n	8003864 <__sfputs_r+0xa>
 800387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003880 <_vfiprintf_r>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	460d      	mov	r5, r1
 8003886:	b09d      	sub	sp, #116	; 0x74
 8003888:	4614      	mov	r4, r2
 800388a:	4698      	mov	r8, r3
 800388c:	4606      	mov	r6, r0
 800388e:	b118      	cbz	r0, 8003898 <_vfiprintf_r+0x18>
 8003890:	6983      	ldr	r3, [r0, #24]
 8003892:	b90b      	cbnz	r3, 8003898 <_vfiprintf_r+0x18>
 8003894:	f7ff fe96 	bl	80035c4 <__sinit>
 8003898:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <_vfiprintf_r+0x240>)
 800389a:	429d      	cmp	r5, r3
 800389c:	d11b      	bne.n	80038d6 <_vfiprintf_r+0x56>
 800389e:	6875      	ldr	r5, [r6, #4]
 80038a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038a2:	07d9      	lsls	r1, r3, #31
 80038a4:	d405      	bmi.n	80038b2 <_vfiprintf_r+0x32>
 80038a6:	89ab      	ldrh	r3, [r5, #12]
 80038a8:	059a      	lsls	r2, r3, #22
 80038aa:	d402      	bmi.n	80038b2 <_vfiprintf_r+0x32>
 80038ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ae:	f7ff ff27 	bl	8003700 <__retarget_lock_acquire_recursive>
 80038b2:	89ab      	ldrh	r3, [r5, #12]
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	d501      	bpl.n	80038bc <_vfiprintf_r+0x3c>
 80038b8:	692b      	ldr	r3, [r5, #16]
 80038ba:	b9eb      	cbnz	r3, 80038f8 <_vfiprintf_r+0x78>
 80038bc:	4629      	mov	r1, r5
 80038be:	4630      	mov	r0, r6
 80038c0:	f000 fb5a 	bl	8003f78 <__swsetup_r>
 80038c4:	b1c0      	cbz	r0, 80038f8 <_vfiprintf_r+0x78>
 80038c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038c8:	07dc      	lsls	r4, r3, #31
 80038ca:	d50e      	bpl.n	80038ea <_vfiprintf_r+0x6a>
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	b01d      	add	sp, #116	; 0x74
 80038d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d6:	4b7b      	ldr	r3, [pc, #492]	; (8003ac4 <_vfiprintf_r+0x244>)
 80038d8:	429d      	cmp	r5, r3
 80038da:	d101      	bne.n	80038e0 <_vfiprintf_r+0x60>
 80038dc:	68b5      	ldr	r5, [r6, #8]
 80038de:	e7df      	b.n	80038a0 <_vfiprintf_r+0x20>
 80038e0:	4b79      	ldr	r3, [pc, #484]	; (8003ac8 <_vfiprintf_r+0x248>)
 80038e2:	429d      	cmp	r5, r3
 80038e4:	bf08      	it	eq
 80038e6:	68f5      	ldreq	r5, [r6, #12]
 80038e8:	e7da      	b.n	80038a0 <_vfiprintf_r+0x20>
 80038ea:	89ab      	ldrh	r3, [r5, #12]
 80038ec:	0598      	lsls	r0, r3, #22
 80038ee:	d4ed      	bmi.n	80038cc <_vfiprintf_r+0x4c>
 80038f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038f2:	f7ff ff06 	bl	8003702 <__retarget_lock_release_recursive>
 80038f6:	e7e9      	b.n	80038cc <_vfiprintf_r+0x4c>
 80038f8:	2300      	movs	r3, #0
 80038fa:	9309      	str	r3, [sp, #36]	; 0x24
 80038fc:	2320      	movs	r3, #32
 80038fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003902:	f8cd 800c 	str.w	r8, [sp, #12]
 8003906:	2330      	movs	r3, #48	; 0x30
 8003908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003acc <_vfiprintf_r+0x24c>
 800390c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003910:	f04f 0901 	mov.w	r9, #1
 8003914:	4623      	mov	r3, r4
 8003916:	469a      	mov	sl, r3
 8003918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800391c:	b10a      	cbz	r2, 8003922 <_vfiprintf_r+0xa2>
 800391e:	2a25      	cmp	r2, #37	; 0x25
 8003920:	d1f9      	bne.n	8003916 <_vfiprintf_r+0x96>
 8003922:	ebba 0b04 	subs.w	fp, sl, r4
 8003926:	d00b      	beq.n	8003940 <_vfiprintf_r+0xc0>
 8003928:	465b      	mov	r3, fp
 800392a:	4622      	mov	r2, r4
 800392c:	4629      	mov	r1, r5
 800392e:	4630      	mov	r0, r6
 8003930:	f7ff ff93 	bl	800385a <__sfputs_r>
 8003934:	3001      	adds	r0, #1
 8003936:	f000 80aa 	beq.w	8003a8e <_vfiprintf_r+0x20e>
 800393a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800393c:	445a      	add	r2, fp
 800393e:	9209      	str	r2, [sp, #36]	; 0x24
 8003940:	f89a 3000 	ldrb.w	r3, [sl]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a2 	beq.w	8003a8e <_vfiprintf_r+0x20e>
 800394a:	2300      	movs	r3, #0
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003954:	f10a 0a01 	add.w	sl, sl, #1
 8003958:	9304      	str	r3, [sp, #16]
 800395a:	9307      	str	r3, [sp, #28]
 800395c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003960:	931a      	str	r3, [sp, #104]	; 0x68
 8003962:	4654      	mov	r4, sl
 8003964:	2205      	movs	r2, #5
 8003966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800396a:	4858      	ldr	r0, [pc, #352]	; (8003acc <_vfiprintf_r+0x24c>)
 800396c:	f7fc fc30 	bl	80001d0 <memchr>
 8003970:	9a04      	ldr	r2, [sp, #16]
 8003972:	b9d8      	cbnz	r0, 80039ac <_vfiprintf_r+0x12c>
 8003974:	06d1      	lsls	r1, r2, #27
 8003976:	bf44      	itt	mi
 8003978:	2320      	movmi	r3, #32
 800397a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397e:	0713      	lsls	r3, r2, #28
 8003980:	bf44      	itt	mi
 8003982:	232b      	movmi	r3, #43	; 0x2b
 8003984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003988:	f89a 3000 	ldrb.w	r3, [sl]
 800398c:	2b2a      	cmp	r3, #42	; 0x2a
 800398e:	d015      	beq.n	80039bc <_vfiprintf_r+0x13c>
 8003990:	9a07      	ldr	r2, [sp, #28]
 8003992:	4654      	mov	r4, sl
 8003994:	2000      	movs	r0, #0
 8003996:	f04f 0c0a 	mov.w	ip, #10
 800399a:	4621      	mov	r1, r4
 800399c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039a0:	3b30      	subs	r3, #48	; 0x30
 80039a2:	2b09      	cmp	r3, #9
 80039a4:	d94e      	bls.n	8003a44 <_vfiprintf_r+0x1c4>
 80039a6:	b1b0      	cbz	r0, 80039d6 <_vfiprintf_r+0x156>
 80039a8:	9207      	str	r2, [sp, #28]
 80039aa:	e014      	b.n	80039d6 <_vfiprintf_r+0x156>
 80039ac:	eba0 0308 	sub.w	r3, r0, r8
 80039b0:	fa09 f303 	lsl.w	r3, r9, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	9304      	str	r3, [sp, #16]
 80039b8:	46a2      	mov	sl, r4
 80039ba:	e7d2      	b.n	8003962 <_vfiprintf_r+0xe2>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	1d19      	adds	r1, r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	9103      	str	r1, [sp, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfbb      	ittet	lt
 80039c8:	425b      	neglt	r3, r3
 80039ca:	f042 0202 	orrlt.w	r2, r2, #2
 80039ce:	9307      	strge	r3, [sp, #28]
 80039d0:	9307      	strlt	r3, [sp, #28]
 80039d2:	bfb8      	it	lt
 80039d4:	9204      	strlt	r2, [sp, #16]
 80039d6:	7823      	ldrb	r3, [r4, #0]
 80039d8:	2b2e      	cmp	r3, #46	; 0x2e
 80039da:	d10c      	bne.n	80039f6 <_vfiprintf_r+0x176>
 80039dc:	7863      	ldrb	r3, [r4, #1]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d135      	bne.n	8003a4e <_vfiprintf_r+0x1ce>
 80039e2:	9b03      	ldr	r3, [sp, #12]
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	9203      	str	r2, [sp, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfb8      	it	lt
 80039ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80039f2:	3402      	adds	r4, #2
 80039f4:	9305      	str	r3, [sp, #20]
 80039f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003adc <_vfiprintf_r+0x25c>
 80039fa:	7821      	ldrb	r1, [r4, #0]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4650      	mov	r0, sl
 8003a00:	f7fc fbe6 	bl	80001d0 <memchr>
 8003a04:	b140      	cbz	r0, 8003a18 <_vfiprintf_r+0x198>
 8003a06:	2340      	movs	r3, #64	; 0x40
 8003a08:	eba0 000a 	sub.w	r0, r0, sl
 8003a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8003a10:	9b04      	ldr	r3, [sp, #16]
 8003a12:	4303      	orrs	r3, r0
 8003a14:	3401      	adds	r4, #1
 8003a16:	9304      	str	r3, [sp, #16]
 8003a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1c:	482c      	ldr	r0, [pc, #176]	; (8003ad0 <_vfiprintf_r+0x250>)
 8003a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a22:	2206      	movs	r2, #6
 8003a24:	f7fc fbd4 	bl	80001d0 <memchr>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d03f      	beq.n	8003aac <_vfiprintf_r+0x22c>
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <_vfiprintf_r+0x254>)
 8003a2e:	bb1b      	cbnz	r3, 8003a78 <_vfiprintf_r+0x1f8>
 8003a30:	9b03      	ldr	r3, [sp, #12]
 8003a32:	3307      	adds	r3, #7
 8003a34:	f023 0307 	bic.w	r3, r3, #7
 8003a38:	3308      	adds	r3, #8
 8003a3a:	9303      	str	r3, [sp, #12]
 8003a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a3e:	443b      	add	r3, r7
 8003a40:	9309      	str	r3, [sp, #36]	; 0x24
 8003a42:	e767      	b.n	8003914 <_vfiprintf_r+0x94>
 8003a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a48:	460c      	mov	r4, r1
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	e7a5      	b.n	800399a <_vfiprintf_r+0x11a>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	3401      	adds	r4, #1
 8003a52:	9305      	str	r3, [sp, #20]
 8003a54:	4619      	mov	r1, r3
 8003a56:	f04f 0c0a 	mov.w	ip, #10
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a60:	3a30      	subs	r2, #48	; 0x30
 8003a62:	2a09      	cmp	r2, #9
 8003a64:	d903      	bls.n	8003a6e <_vfiprintf_r+0x1ee>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0c5      	beq.n	80039f6 <_vfiprintf_r+0x176>
 8003a6a:	9105      	str	r1, [sp, #20]
 8003a6c:	e7c3      	b.n	80039f6 <_vfiprintf_r+0x176>
 8003a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a72:	4604      	mov	r4, r0
 8003a74:	2301      	movs	r3, #1
 8003a76:	e7f0      	b.n	8003a5a <_vfiprintf_r+0x1da>
 8003a78:	ab03      	add	r3, sp, #12
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	462a      	mov	r2, r5
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <_vfiprintf_r+0x258>)
 8003a80:	a904      	add	r1, sp, #16
 8003a82:	4630      	mov	r0, r6
 8003a84:	f3af 8000 	nop.w
 8003a88:	4607      	mov	r7, r0
 8003a8a:	1c78      	adds	r0, r7, #1
 8003a8c:	d1d6      	bne.n	8003a3c <_vfiprintf_r+0x1bc>
 8003a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a90:	07d9      	lsls	r1, r3, #31
 8003a92:	d405      	bmi.n	8003aa0 <_vfiprintf_r+0x220>
 8003a94:	89ab      	ldrh	r3, [r5, #12]
 8003a96:	059a      	lsls	r2, r3, #22
 8003a98:	d402      	bmi.n	8003aa0 <_vfiprintf_r+0x220>
 8003a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a9c:	f7ff fe31 	bl	8003702 <__retarget_lock_release_recursive>
 8003aa0:	89ab      	ldrh	r3, [r5, #12]
 8003aa2:	065b      	lsls	r3, r3, #25
 8003aa4:	f53f af12 	bmi.w	80038cc <_vfiprintf_r+0x4c>
 8003aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aaa:	e711      	b.n	80038d0 <_vfiprintf_r+0x50>
 8003aac:	ab03      	add	r3, sp, #12
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <_vfiprintf_r+0x258>)
 8003ab4:	a904      	add	r1, sp, #16
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 f880 	bl	8003bbc <_printf_i>
 8003abc:	e7e4      	b.n	8003a88 <_vfiprintf_r+0x208>
 8003abe:	bf00      	nop
 8003ac0:	08004490 	.word	0x08004490
 8003ac4:	080044b0 	.word	0x080044b0
 8003ac8:	08004470 	.word	0x08004470
 8003acc:	080044d0 	.word	0x080044d0
 8003ad0:	080044da 	.word	0x080044da
 8003ad4:	00000000 	.word	0x00000000
 8003ad8:	0800385b 	.word	0x0800385b
 8003adc:	080044d6 	.word	0x080044d6

08003ae0 <_printf_common>:
 8003ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	4616      	mov	r6, r2
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	688a      	ldr	r2, [r1, #8]
 8003aea:	690b      	ldr	r3, [r1, #16]
 8003aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bfb8      	it	lt
 8003af4:	4613      	movlt	r3, r2
 8003af6:	6033      	str	r3, [r6, #0]
 8003af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003afc:	4607      	mov	r7, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	b10a      	cbz	r2, 8003b06 <_printf_common+0x26>
 8003b02:	3301      	adds	r3, #1
 8003b04:	6033      	str	r3, [r6, #0]
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	0699      	lsls	r1, r3, #26
 8003b0a:	bf42      	ittt	mi
 8003b0c:	6833      	ldrmi	r3, [r6, #0]
 8003b0e:	3302      	addmi	r3, #2
 8003b10:	6033      	strmi	r3, [r6, #0]
 8003b12:	6825      	ldr	r5, [r4, #0]
 8003b14:	f015 0506 	ands.w	r5, r5, #6
 8003b18:	d106      	bne.n	8003b28 <_printf_common+0x48>
 8003b1a:	f104 0a19 	add.w	sl, r4, #25
 8003b1e:	68e3      	ldr	r3, [r4, #12]
 8003b20:	6832      	ldr	r2, [r6, #0]
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	42ab      	cmp	r3, r5
 8003b26:	dc26      	bgt.n	8003b76 <_printf_common+0x96>
 8003b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b2c:	1e13      	subs	r3, r2, #0
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	bf18      	it	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	0692      	lsls	r2, r2, #26
 8003b36:	d42b      	bmi.n	8003b90 <_printf_common+0xb0>
 8003b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	4638      	mov	r0, r7
 8003b40:	47c0      	blx	r8
 8003b42:	3001      	adds	r0, #1
 8003b44:	d01e      	beq.n	8003b84 <_printf_common+0xa4>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	68e5      	ldr	r5, [r4, #12]
 8003b4a:	6832      	ldr	r2, [r6, #0]
 8003b4c:	f003 0306 	and.w	r3, r3, #6
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	bf08      	it	eq
 8003b54:	1aad      	subeq	r5, r5, r2
 8003b56:	68a3      	ldr	r3, [r4, #8]
 8003b58:	6922      	ldr	r2, [r4, #16]
 8003b5a:	bf0c      	ite	eq
 8003b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b60:	2500      	movne	r5, #0
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bfc4      	itt	gt
 8003b66:	1a9b      	subgt	r3, r3, r2
 8003b68:	18ed      	addgt	r5, r5, r3
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	341a      	adds	r4, #26
 8003b6e:	42b5      	cmp	r5, r6
 8003b70:	d11a      	bne.n	8003ba8 <_printf_common+0xc8>
 8003b72:	2000      	movs	r0, #0
 8003b74:	e008      	b.n	8003b88 <_printf_common+0xa8>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4652      	mov	r2, sl
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	47c0      	blx	r8
 8003b80:	3001      	adds	r0, #1
 8003b82:	d103      	bne.n	8003b8c <_printf_common+0xac>
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	e7c6      	b.n	8003b1e <_printf_common+0x3e>
 8003b90:	18e1      	adds	r1, r4, r3
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	2030      	movs	r0, #48	; 0x30
 8003b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b9a:	4422      	add	r2, r4
 8003b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	e7c7      	b.n	8003b38 <_printf_common+0x58>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	4622      	mov	r2, r4
 8003bac:	4649      	mov	r1, r9
 8003bae:	4638      	mov	r0, r7
 8003bb0:	47c0      	blx	r8
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d0e6      	beq.n	8003b84 <_printf_common+0xa4>
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7d9      	b.n	8003b6e <_printf_common+0x8e>
	...

08003bbc <_printf_i>:
 8003bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	7e0f      	ldrb	r7, [r1, #24]
 8003bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bc4:	2f78      	cmp	r7, #120	; 0x78
 8003bc6:	4691      	mov	r9, r2
 8003bc8:	4680      	mov	r8, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	469a      	mov	sl, r3
 8003bce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bd2:	d807      	bhi.n	8003be4 <_printf_i+0x28>
 8003bd4:	2f62      	cmp	r7, #98	; 0x62
 8003bd6:	d80a      	bhi.n	8003bee <_printf_i+0x32>
 8003bd8:	2f00      	cmp	r7, #0
 8003bda:	f000 80d8 	beq.w	8003d8e <_printf_i+0x1d2>
 8003bde:	2f58      	cmp	r7, #88	; 0x58
 8003be0:	f000 80a3 	beq.w	8003d2a <_printf_i+0x16e>
 8003be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bec:	e03a      	b.n	8003c64 <_printf_i+0xa8>
 8003bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bf2:	2b15      	cmp	r3, #21
 8003bf4:	d8f6      	bhi.n	8003be4 <_printf_i+0x28>
 8003bf6:	a101      	add	r1, pc, #4	; (adr r1, 8003bfc <_printf_i+0x40>)
 8003bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003be5 	.word	0x08003be5
 8003c08:	08003be5 	.word	0x08003be5
 8003c0c:	08003be5 	.word	0x08003be5
 8003c10:	08003be5 	.word	0x08003be5
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003be5 	.word	0x08003be5
 8003c1c:	08003be5 	.word	0x08003be5
 8003c20:	08003be5 	.word	0x08003be5
 8003c24:	08003be5 	.word	0x08003be5
 8003c28:	08003d75 	.word	0x08003d75
 8003c2c:	08003c99 	.word	0x08003c99
 8003c30:	08003d57 	.word	0x08003d57
 8003c34:	08003be5 	.word	0x08003be5
 8003c38:	08003be5 	.word	0x08003be5
 8003c3c:	08003d97 	.word	0x08003d97
 8003c40:	08003be5 	.word	0x08003be5
 8003c44:	08003c99 	.word	0x08003c99
 8003c48:	08003be5 	.word	0x08003be5
 8003c4c:	08003be5 	.word	0x08003be5
 8003c50:	08003d5f 	.word	0x08003d5f
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	602a      	str	r2, [r5, #0]
 8003c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0a3      	b.n	8003db0 <_printf_i+0x1f4>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	6829      	ldr	r1, [r5, #0]
 8003c6c:	0606      	lsls	r6, r0, #24
 8003c6e:	f101 0304 	add.w	r3, r1, #4
 8003c72:	d50a      	bpl.n	8003c8a <_printf_i+0xce>
 8003c74:	680e      	ldr	r6, [r1, #0]
 8003c76:	602b      	str	r3, [r5, #0]
 8003c78:	2e00      	cmp	r6, #0
 8003c7a:	da03      	bge.n	8003c84 <_printf_i+0xc8>
 8003c7c:	232d      	movs	r3, #45	; 0x2d
 8003c7e:	4276      	negs	r6, r6
 8003c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c84:	485e      	ldr	r0, [pc, #376]	; (8003e00 <_printf_i+0x244>)
 8003c86:	230a      	movs	r3, #10
 8003c88:	e019      	b.n	8003cbe <_printf_i+0x102>
 8003c8a:	680e      	ldr	r6, [r1, #0]
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c92:	bf18      	it	ne
 8003c94:	b236      	sxthne	r6, r6
 8003c96:	e7ef      	b.n	8003c78 <_printf_i+0xbc>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	1d19      	adds	r1, r3, #4
 8003c9e:	6029      	str	r1, [r5, #0]
 8003ca0:	0601      	lsls	r1, r0, #24
 8003ca2:	d501      	bpl.n	8003ca8 <_printf_i+0xec>
 8003ca4:	681e      	ldr	r6, [r3, #0]
 8003ca6:	e002      	b.n	8003cae <_printf_i+0xf2>
 8003ca8:	0646      	lsls	r6, r0, #25
 8003caa:	d5fb      	bpl.n	8003ca4 <_printf_i+0xe8>
 8003cac:	881e      	ldrh	r6, [r3, #0]
 8003cae:	4854      	ldr	r0, [pc, #336]	; (8003e00 <_printf_i+0x244>)
 8003cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2308      	moveq	r3, #8
 8003cb6:	230a      	movne	r3, #10
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cbe:	6865      	ldr	r5, [r4, #4]
 8003cc0:	60a5      	str	r5, [r4, #8]
 8003cc2:	2d00      	cmp	r5, #0
 8003cc4:	bfa2      	ittt	ge
 8003cc6:	6821      	ldrge	r1, [r4, #0]
 8003cc8:	f021 0104 	bicge.w	r1, r1, #4
 8003ccc:	6021      	strge	r1, [r4, #0]
 8003cce:	b90e      	cbnz	r6, 8003cd4 <_printf_i+0x118>
 8003cd0:	2d00      	cmp	r5, #0
 8003cd2:	d04d      	beq.n	8003d70 <_printf_i+0x1b4>
 8003cd4:	4615      	mov	r5, r2
 8003cd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cda:	fb03 6711 	mls	r7, r3, r1, r6
 8003cde:	5dc7      	ldrb	r7, [r0, r7]
 8003ce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ce4:	4637      	mov	r7, r6
 8003ce6:	42bb      	cmp	r3, r7
 8003ce8:	460e      	mov	r6, r1
 8003cea:	d9f4      	bls.n	8003cd6 <_printf_i+0x11a>
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d10b      	bne.n	8003d08 <_printf_i+0x14c>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	07de      	lsls	r6, r3, #31
 8003cf4:	d508      	bpl.n	8003d08 <_printf_i+0x14c>
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	6861      	ldr	r1, [r4, #4]
 8003cfa:	4299      	cmp	r1, r3
 8003cfc:	bfde      	ittt	le
 8003cfe:	2330      	movle	r3, #48	; 0x30
 8003d00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d08:	1b52      	subs	r2, r2, r5
 8003d0a:	6122      	str	r2, [r4, #16]
 8003d0c:	f8cd a000 	str.w	sl, [sp]
 8003d10:	464b      	mov	r3, r9
 8003d12:	aa03      	add	r2, sp, #12
 8003d14:	4621      	mov	r1, r4
 8003d16:	4640      	mov	r0, r8
 8003d18:	f7ff fee2 	bl	8003ae0 <_printf_common>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d14c      	bne.n	8003dba <_printf_i+0x1fe>
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	b004      	add	sp, #16
 8003d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2a:	4835      	ldr	r0, [pc, #212]	; (8003e00 <_printf_i+0x244>)
 8003d2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d30:	6829      	ldr	r1, [r5, #0]
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d38:	6029      	str	r1, [r5, #0]
 8003d3a:	061d      	lsls	r5, r3, #24
 8003d3c:	d514      	bpl.n	8003d68 <_printf_i+0x1ac>
 8003d3e:	07df      	lsls	r7, r3, #31
 8003d40:	bf44      	itt	mi
 8003d42:	f043 0320 	orrmi.w	r3, r3, #32
 8003d46:	6023      	strmi	r3, [r4, #0]
 8003d48:	b91e      	cbnz	r6, 8003d52 <_printf_i+0x196>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	f023 0320 	bic.w	r3, r3, #32
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	2310      	movs	r3, #16
 8003d54:	e7b0      	b.n	8003cb8 <_printf_i+0xfc>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	f043 0320 	orr.w	r3, r3, #32
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	2378      	movs	r3, #120	; 0x78
 8003d60:	4828      	ldr	r0, [pc, #160]	; (8003e04 <_printf_i+0x248>)
 8003d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d66:	e7e3      	b.n	8003d30 <_printf_i+0x174>
 8003d68:	0659      	lsls	r1, r3, #25
 8003d6a:	bf48      	it	mi
 8003d6c:	b2b6      	uxthmi	r6, r6
 8003d6e:	e7e6      	b.n	8003d3e <_printf_i+0x182>
 8003d70:	4615      	mov	r5, r2
 8003d72:	e7bb      	b.n	8003cec <_printf_i+0x130>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	6826      	ldr	r6, [r4, #0]
 8003d78:	6961      	ldr	r1, [r4, #20]
 8003d7a:	1d18      	adds	r0, r3, #4
 8003d7c:	6028      	str	r0, [r5, #0]
 8003d7e:	0635      	lsls	r5, r6, #24
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	d501      	bpl.n	8003d88 <_printf_i+0x1cc>
 8003d84:	6019      	str	r1, [r3, #0]
 8003d86:	e002      	b.n	8003d8e <_printf_i+0x1d2>
 8003d88:	0670      	lsls	r0, r6, #25
 8003d8a:	d5fb      	bpl.n	8003d84 <_printf_i+0x1c8>
 8003d8c:	8019      	strh	r1, [r3, #0]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6123      	str	r3, [r4, #16]
 8003d92:	4615      	mov	r5, r2
 8003d94:	e7ba      	b.n	8003d0c <_printf_i+0x150>
 8003d96:	682b      	ldr	r3, [r5, #0]
 8003d98:	1d1a      	adds	r2, r3, #4
 8003d9a:	602a      	str	r2, [r5, #0]
 8003d9c:	681d      	ldr	r5, [r3, #0]
 8003d9e:	6862      	ldr	r2, [r4, #4]
 8003da0:	2100      	movs	r1, #0
 8003da2:	4628      	mov	r0, r5
 8003da4:	f7fc fa14 	bl	80001d0 <memchr>
 8003da8:	b108      	cbz	r0, 8003dae <_printf_i+0x1f2>
 8003daa:	1b40      	subs	r0, r0, r5
 8003dac:	6060      	str	r0, [r4, #4]
 8003dae:	6863      	ldr	r3, [r4, #4]
 8003db0:	6123      	str	r3, [r4, #16]
 8003db2:	2300      	movs	r3, #0
 8003db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db8:	e7a8      	b.n	8003d0c <_printf_i+0x150>
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	462a      	mov	r2, r5
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	47d0      	blx	sl
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d0ab      	beq.n	8003d20 <_printf_i+0x164>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	079b      	lsls	r3, r3, #30
 8003dcc:	d413      	bmi.n	8003df6 <_printf_i+0x23a>
 8003dce:	68e0      	ldr	r0, [r4, #12]
 8003dd0:	9b03      	ldr	r3, [sp, #12]
 8003dd2:	4298      	cmp	r0, r3
 8003dd4:	bfb8      	it	lt
 8003dd6:	4618      	movlt	r0, r3
 8003dd8:	e7a4      	b.n	8003d24 <_printf_i+0x168>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4632      	mov	r2, r6
 8003dde:	4649      	mov	r1, r9
 8003de0:	4640      	mov	r0, r8
 8003de2:	47d0      	blx	sl
 8003de4:	3001      	adds	r0, #1
 8003de6:	d09b      	beq.n	8003d20 <_printf_i+0x164>
 8003de8:	3501      	adds	r5, #1
 8003dea:	68e3      	ldr	r3, [r4, #12]
 8003dec:	9903      	ldr	r1, [sp, #12]
 8003dee:	1a5b      	subs	r3, r3, r1
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	dcf2      	bgt.n	8003dda <_printf_i+0x21e>
 8003df4:	e7eb      	b.n	8003dce <_printf_i+0x212>
 8003df6:	2500      	movs	r5, #0
 8003df8:	f104 0619 	add.w	r6, r4, #25
 8003dfc:	e7f5      	b.n	8003dea <_printf_i+0x22e>
 8003dfe:	bf00      	nop
 8003e00:	080044e1 	.word	0x080044e1
 8003e04:	080044f2 	.word	0x080044f2

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4d06      	ldr	r5, [pc, #24]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fc fdc2 	bl	800099c <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	2000016c 	.word	0x2000016c

08003e28 <__sread>:
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e30:	f000 fab2 	bl	8004398 <_read_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	bfab      	itete	ge
 8003e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e3c:	181b      	addge	r3, r3, r0
 8003e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e42:	bfac      	ite	ge
 8003e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e46:	81a3      	strhlt	r3, [r4, #12]
 8003e48:	bd10      	pop	{r4, pc}

08003e4a <__swrite>:
 8003e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4e:	461f      	mov	r7, r3
 8003e50:	898b      	ldrh	r3, [r1, #12]
 8003e52:	05db      	lsls	r3, r3, #23
 8003e54:	4605      	mov	r5, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	4616      	mov	r6, r2
 8003e5a:	d505      	bpl.n	8003e68 <__swrite+0x1e>
 8003e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e60:	2302      	movs	r3, #2
 8003e62:	2200      	movs	r2, #0
 8003e64:	f000 f9c8 	bl	80041f8 <_lseek_r>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e72:	81a3      	strh	r3, [r4, #12]
 8003e74:	4632      	mov	r2, r6
 8003e76:	463b      	mov	r3, r7
 8003e78:	4628      	mov	r0, r5
 8003e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7e:	f000 b869 	b.w	8003f54 <_write_r>

08003e82 <__sseek>:
 8003e82:	b510      	push	{r4, lr}
 8003e84:	460c      	mov	r4, r1
 8003e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8a:	f000 f9b5 	bl	80041f8 <_lseek_r>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	bf15      	itete	ne
 8003e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e9e:	81a3      	strheq	r3, [r4, #12]
 8003ea0:	bf18      	it	ne
 8003ea2:	81a3      	strhne	r3, [r4, #12]
 8003ea4:	bd10      	pop	{r4, pc}

08003ea6 <__sclose>:
 8003ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eaa:	f000 b8d3 	b.w	8004054 <_close_r>
	...

08003eb0 <__swbuf_r>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	460e      	mov	r6, r1
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	b118      	cbz	r0, 8003ec2 <__swbuf_r+0x12>
 8003eba:	6983      	ldr	r3, [r0, #24]
 8003ebc:	b90b      	cbnz	r3, 8003ec2 <__swbuf_r+0x12>
 8003ebe:	f7ff fb81 	bl	80035c4 <__sinit>
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <__swbuf_r+0x98>)
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	d12b      	bne.n	8003f20 <__swbuf_r+0x70>
 8003ec8:	686c      	ldr	r4, [r5, #4]
 8003eca:	69a3      	ldr	r3, [r4, #24]
 8003ecc:	60a3      	str	r3, [r4, #8]
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	071a      	lsls	r2, r3, #28
 8003ed2:	d52f      	bpl.n	8003f34 <__swbuf_r+0x84>
 8003ed4:	6923      	ldr	r3, [r4, #16]
 8003ed6:	b36b      	cbz	r3, 8003f34 <__swbuf_r+0x84>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	6820      	ldr	r0, [r4, #0]
 8003edc:	1ac0      	subs	r0, r0, r3
 8003ede:	6963      	ldr	r3, [r4, #20]
 8003ee0:	b2f6      	uxtb	r6, r6
 8003ee2:	4283      	cmp	r3, r0
 8003ee4:	4637      	mov	r7, r6
 8003ee6:	dc04      	bgt.n	8003ef2 <__swbuf_r+0x42>
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	f000 f948 	bl	8004180 <_fflush_r>
 8003ef0:	bb30      	cbnz	r0, 8003f40 <__swbuf_r+0x90>
 8003ef2:	68a3      	ldr	r3, [r4, #8]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	60a3      	str	r3, [r4, #8]
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	6022      	str	r2, [r4, #0]
 8003efe:	701e      	strb	r6, [r3, #0]
 8003f00:	6963      	ldr	r3, [r4, #20]
 8003f02:	3001      	adds	r0, #1
 8003f04:	4283      	cmp	r3, r0
 8003f06:	d004      	beq.n	8003f12 <__swbuf_r+0x62>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	07db      	lsls	r3, r3, #31
 8003f0c:	d506      	bpl.n	8003f1c <__swbuf_r+0x6c>
 8003f0e:	2e0a      	cmp	r6, #10
 8003f10:	d104      	bne.n	8003f1c <__swbuf_r+0x6c>
 8003f12:	4621      	mov	r1, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	f000 f933 	bl	8004180 <_fflush_r>
 8003f1a:	b988      	cbnz	r0, 8003f40 <__swbuf_r+0x90>
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <__swbuf_r+0x9c>)
 8003f22:	429c      	cmp	r4, r3
 8003f24:	d101      	bne.n	8003f2a <__swbuf_r+0x7a>
 8003f26:	68ac      	ldr	r4, [r5, #8]
 8003f28:	e7cf      	b.n	8003eca <__swbuf_r+0x1a>
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <__swbuf_r+0xa0>)
 8003f2c:	429c      	cmp	r4, r3
 8003f2e:	bf08      	it	eq
 8003f30:	68ec      	ldreq	r4, [r5, #12]
 8003f32:	e7ca      	b.n	8003eca <__swbuf_r+0x1a>
 8003f34:	4621      	mov	r1, r4
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 f81e 	bl	8003f78 <__swsetup_r>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d0cb      	beq.n	8003ed8 <__swbuf_r+0x28>
 8003f40:	f04f 37ff 	mov.w	r7, #4294967295
 8003f44:	e7ea      	b.n	8003f1c <__swbuf_r+0x6c>
 8003f46:	bf00      	nop
 8003f48:	08004490 	.word	0x08004490
 8003f4c:	080044b0 	.word	0x080044b0
 8003f50:	08004470 	.word	0x08004470

08003f54 <_write_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4d07      	ldr	r5, [pc, #28]	; (8003f74 <_write_r+0x20>)
 8003f58:	4604      	mov	r4, r0
 8003f5a:	4608      	mov	r0, r1
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	2200      	movs	r2, #0
 8003f60:	602a      	str	r2, [r5, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7fc fcc9 	bl	80008fa <_write>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_write_r+0x1e>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_write_r+0x1e>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	2000016c 	.word	0x2000016c

08003f78 <__swsetup_r>:
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <__swsetup_r+0xcc>)
 8003f7a:	b570      	push	{r4, r5, r6, lr}
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	b125      	cbz	r5, 8003f8e <__swsetup_r+0x16>
 8003f84:	69ab      	ldr	r3, [r5, #24]
 8003f86:	b913      	cbnz	r3, 8003f8e <__swsetup_r+0x16>
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f7ff fb1b 	bl	80035c4 <__sinit>
 8003f8e:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <__swsetup_r+0xd0>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d10f      	bne.n	8003fb4 <__swsetup_r+0x3c>
 8003f94:	686c      	ldr	r4, [r5, #4]
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f9c:	0719      	lsls	r1, r3, #28
 8003f9e:	d42c      	bmi.n	8003ffa <__swsetup_r+0x82>
 8003fa0:	06dd      	lsls	r5, r3, #27
 8003fa2:	d411      	bmi.n	8003fc8 <__swsetup_r+0x50>
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	6033      	str	r3, [r6, #0]
 8003fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb2:	e03e      	b.n	8004032 <__swsetup_r+0xba>
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <__swsetup_r+0xd4>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	d101      	bne.n	8003fbe <__swsetup_r+0x46>
 8003fba:	68ac      	ldr	r4, [r5, #8]
 8003fbc:	e7eb      	b.n	8003f96 <__swsetup_r+0x1e>
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <__swsetup_r+0xd8>)
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	bf08      	it	eq
 8003fc4:	68ec      	ldreq	r4, [r5, #12]
 8003fc6:	e7e6      	b.n	8003f96 <__swsetup_r+0x1e>
 8003fc8:	0758      	lsls	r0, r3, #29
 8003fca:	d512      	bpl.n	8003ff2 <__swsetup_r+0x7a>
 8003fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fce:	b141      	cbz	r1, 8003fe2 <__swsetup_r+0x6a>
 8003fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	d002      	beq.n	8003fde <__swsetup_r+0x66>
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f991 	bl	8004300 <_free_r>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	2300      	movs	r3, #0
 8003fec:	6063      	str	r3, [r4, #4]
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	81a3      	strh	r3, [r4, #12]
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	b94b      	cbnz	r3, 8004012 <__swsetup_r+0x9a>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d003      	beq.n	8004012 <__swsetup_r+0x9a>
 800400a:	4621      	mov	r1, r4
 800400c:	4630      	mov	r0, r6
 800400e:	f000 f92b 	bl	8004268 <__smakebuf_r>
 8004012:	89a0      	ldrh	r0, [r4, #12]
 8004014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004018:	f010 0301 	ands.w	r3, r0, #1
 800401c:	d00a      	beq.n	8004034 <__swsetup_r+0xbc>
 800401e:	2300      	movs	r3, #0
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	6963      	ldr	r3, [r4, #20]
 8004024:	425b      	negs	r3, r3
 8004026:	61a3      	str	r3, [r4, #24]
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	b943      	cbnz	r3, 800403e <__swsetup_r+0xc6>
 800402c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004030:	d1ba      	bne.n	8003fa8 <__swsetup_r+0x30>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	0781      	lsls	r1, r0, #30
 8004036:	bf58      	it	pl
 8004038:	6963      	ldrpl	r3, [r4, #20]
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	e7f4      	b.n	8004028 <__swsetup_r+0xb0>
 800403e:	2000      	movs	r0, #0
 8004040:	e7f7      	b.n	8004032 <__swsetup_r+0xba>
 8004042:	bf00      	nop
 8004044:	20000010 	.word	0x20000010
 8004048:	08004490 	.word	0x08004490
 800404c:	080044b0 	.word	0x080044b0
 8004050:	08004470 	.word	0x08004470

08004054 <_close_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d06      	ldr	r5, [pc, #24]	; (8004070 <_close_r+0x1c>)
 8004058:	2300      	movs	r3, #0
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	f7fc fc67 	bl	8000932 <_close>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_close_r+0x1a>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_close_r+0x1a>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	2000016c 	.word	0x2000016c

08004074 <__sflush_r>:
 8004074:	898a      	ldrh	r2, [r1, #12]
 8004076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800407a:	4605      	mov	r5, r0
 800407c:	0710      	lsls	r0, r2, #28
 800407e:	460c      	mov	r4, r1
 8004080:	d458      	bmi.n	8004134 <__sflush_r+0xc0>
 8004082:	684b      	ldr	r3, [r1, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	dc05      	bgt.n	8004094 <__sflush_r+0x20>
 8004088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	dc02      	bgt.n	8004094 <__sflush_r+0x20>
 800408e:	2000      	movs	r0, #0
 8004090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004096:	2e00      	cmp	r6, #0
 8004098:	d0f9      	beq.n	800408e <__sflush_r+0x1a>
 800409a:	2300      	movs	r3, #0
 800409c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040a0:	682f      	ldr	r7, [r5, #0]
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	d032      	beq.n	800410c <__sflush_r+0x98>
 80040a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	075a      	lsls	r2, r3, #29
 80040ac:	d505      	bpl.n	80040ba <__sflush_r+0x46>
 80040ae:	6863      	ldr	r3, [r4, #4]
 80040b0:	1ac0      	subs	r0, r0, r3
 80040b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040b4:	b10b      	cbz	r3, 80040ba <__sflush_r+0x46>
 80040b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040b8:	1ac0      	subs	r0, r0, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	4602      	mov	r2, r0
 80040be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040c0:	6a21      	ldr	r1, [r4, #32]
 80040c2:	4628      	mov	r0, r5
 80040c4:	47b0      	blx	r6
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	d106      	bne.n	80040da <__sflush_r+0x66>
 80040cc:	6829      	ldr	r1, [r5, #0]
 80040ce:	291d      	cmp	r1, #29
 80040d0:	d82c      	bhi.n	800412c <__sflush_r+0xb8>
 80040d2:	4a2a      	ldr	r2, [pc, #168]	; (800417c <__sflush_r+0x108>)
 80040d4:	40ca      	lsrs	r2, r1
 80040d6:	07d6      	lsls	r6, r2, #31
 80040d8:	d528      	bpl.n	800412c <__sflush_r+0xb8>
 80040da:	2200      	movs	r2, #0
 80040dc:	6062      	str	r2, [r4, #4]
 80040de:	04d9      	lsls	r1, r3, #19
 80040e0:	6922      	ldr	r2, [r4, #16]
 80040e2:	6022      	str	r2, [r4, #0]
 80040e4:	d504      	bpl.n	80040f0 <__sflush_r+0x7c>
 80040e6:	1c42      	adds	r2, r0, #1
 80040e8:	d101      	bne.n	80040ee <__sflush_r+0x7a>
 80040ea:	682b      	ldr	r3, [r5, #0]
 80040ec:	b903      	cbnz	r3, 80040f0 <__sflush_r+0x7c>
 80040ee:	6560      	str	r0, [r4, #84]	; 0x54
 80040f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040f2:	602f      	str	r7, [r5, #0]
 80040f4:	2900      	cmp	r1, #0
 80040f6:	d0ca      	beq.n	800408e <__sflush_r+0x1a>
 80040f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040fc:	4299      	cmp	r1, r3
 80040fe:	d002      	beq.n	8004106 <__sflush_r+0x92>
 8004100:	4628      	mov	r0, r5
 8004102:	f000 f8fd 	bl	8004300 <_free_r>
 8004106:	2000      	movs	r0, #0
 8004108:	6360      	str	r0, [r4, #52]	; 0x34
 800410a:	e7c1      	b.n	8004090 <__sflush_r+0x1c>
 800410c:	6a21      	ldr	r1, [r4, #32]
 800410e:	2301      	movs	r3, #1
 8004110:	4628      	mov	r0, r5
 8004112:	47b0      	blx	r6
 8004114:	1c41      	adds	r1, r0, #1
 8004116:	d1c7      	bne.n	80040a8 <__sflush_r+0x34>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0c4      	beq.n	80040a8 <__sflush_r+0x34>
 800411e:	2b1d      	cmp	r3, #29
 8004120:	d001      	beq.n	8004126 <__sflush_r+0xb2>
 8004122:	2b16      	cmp	r3, #22
 8004124:	d101      	bne.n	800412a <__sflush_r+0xb6>
 8004126:	602f      	str	r7, [r5, #0]
 8004128:	e7b1      	b.n	800408e <__sflush_r+0x1a>
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004130:	81a3      	strh	r3, [r4, #12]
 8004132:	e7ad      	b.n	8004090 <__sflush_r+0x1c>
 8004134:	690f      	ldr	r7, [r1, #16]
 8004136:	2f00      	cmp	r7, #0
 8004138:	d0a9      	beq.n	800408e <__sflush_r+0x1a>
 800413a:	0793      	lsls	r3, r2, #30
 800413c:	680e      	ldr	r6, [r1, #0]
 800413e:	bf08      	it	eq
 8004140:	694b      	ldreq	r3, [r1, #20]
 8004142:	600f      	str	r7, [r1, #0]
 8004144:	bf18      	it	ne
 8004146:	2300      	movne	r3, #0
 8004148:	eba6 0807 	sub.w	r8, r6, r7
 800414c:	608b      	str	r3, [r1, #8]
 800414e:	f1b8 0f00 	cmp.w	r8, #0
 8004152:	dd9c      	ble.n	800408e <__sflush_r+0x1a>
 8004154:	6a21      	ldr	r1, [r4, #32]
 8004156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004158:	4643      	mov	r3, r8
 800415a:	463a      	mov	r2, r7
 800415c:	4628      	mov	r0, r5
 800415e:	47b0      	blx	r6
 8004160:	2800      	cmp	r0, #0
 8004162:	dc06      	bgt.n	8004172 <__sflush_r+0xfe>
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	e78e      	b.n	8004090 <__sflush_r+0x1c>
 8004172:	4407      	add	r7, r0
 8004174:	eba8 0800 	sub.w	r8, r8, r0
 8004178:	e7e9      	b.n	800414e <__sflush_r+0xda>
 800417a:	bf00      	nop
 800417c:	20400001 	.word	0x20400001

08004180 <_fflush_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	690b      	ldr	r3, [r1, #16]
 8004184:	4605      	mov	r5, r0
 8004186:	460c      	mov	r4, r1
 8004188:	b913      	cbnz	r3, 8004190 <_fflush_r+0x10>
 800418a:	2500      	movs	r5, #0
 800418c:	4628      	mov	r0, r5
 800418e:	bd38      	pop	{r3, r4, r5, pc}
 8004190:	b118      	cbz	r0, 800419a <_fflush_r+0x1a>
 8004192:	6983      	ldr	r3, [r0, #24]
 8004194:	b90b      	cbnz	r3, 800419a <_fflush_r+0x1a>
 8004196:	f7ff fa15 	bl	80035c4 <__sinit>
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <_fflush_r+0x6c>)
 800419c:	429c      	cmp	r4, r3
 800419e:	d11b      	bne.n	80041d8 <_fflush_r+0x58>
 80041a0:	686c      	ldr	r4, [r5, #4]
 80041a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ef      	beq.n	800418a <_fflush_r+0xa>
 80041aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041ac:	07d0      	lsls	r0, r2, #31
 80041ae:	d404      	bmi.n	80041ba <_fflush_r+0x3a>
 80041b0:	0599      	lsls	r1, r3, #22
 80041b2:	d402      	bmi.n	80041ba <_fflush_r+0x3a>
 80041b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b6:	f7ff faa3 	bl	8003700 <__retarget_lock_acquire_recursive>
 80041ba:	4628      	mov	r0, r5
 80041bc:	4621      	mov	r1, r4
 80041be:	f7ff ff59 	bl	8004074 <__sflush_r>
 80041c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041c4:	07da      	lsls	r2, r3, #31
 80041c6:	4605      	mov	r5, r0
 80041c8:	d4e0      	bmi.n	800418c <_fflush_r+0xc>
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	059b      	lsls	r3, r3, #22
 80041ce:	d4dd      	bmi.n	800418c <_fflush_r+0xc>
 80041d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041d2:	f7ff fa96 	bl	8003702 <__retarget_lock_release_recursive>
 80041d6:	e7d9      	b.n	800418c <_fflush_r+0xc>
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <_fflush_r+0x70>)
 80041da:	429c      	cmp	r4, r3
 80041dc:	d101      	bne.n	80041e2 <_fflush_r+0x62>
 80041de:	68ac      	ldr	r4, [r5, #8]
 80041e0:	e7df      	b.n	80041a2 <_fflush_r+0x22>
 80041e2:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <_fflush_r+0x74>)
 80041e4:	429c      	cmp	r4, r3
 80041e6:	bf08      	it	eq
 80041e8:	68ec      	ldreq	r4, [r5, #12]
 80041ea:	e7da      	b.n	80041a2 <_fflush_r+0x22>
 80041ec:	08004490 	.word	0x08004490
 80041f0:	080044b0 	.word	0x080044b0
 80041f4:	08004470 	.word	0x08004470

080041f8 <_lseek_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4d07      	ldr	r5, [pc, #28]	; (8004218 <_lseek_r+0x20>)
 80041fc:	4604      	mov	r4, r0
 80041fe:	4608      	mov	r0, r1
 8004200:	4611      	mov	r1, r2
 8004202:	2200      	movs	r2, #0
 8004204:	602a      	str	r2, [r5, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	f7fc fbba 	bl	8000980 <_lseek>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_lseek_r+0x1e>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_lseek_r+0x1e>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	2000016c 	.word	0x2000016c

0800421c <__swhatbuf_r>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	460e      	mov	r6, r1
 8004220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004224:	2900      	cmp	r1, #0
 8004226:	b096      	sub	sp, #88	; 0x58
 8004228:	4614      	mov	r4, r2
 800422a:	461d      	mov	r5, r3
 800422c:	da08      	bge.n	8004240 <__swhatbuf_r+0x24>
 800422e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	602a      	str	r2, [r5, #0]
 8004236:	061a      	lsls	r2, r3, #24
 8004238:	d410      	bmi.n	800425c <__swhatbuf_r+0x40>
 800423a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800423e:	e00e      	b.n	800425e <__swhatbuf_r+0x42>
 8004240:	466a      	mov	r2, sp
 8004242:	f000 f8bb 	bl	80043bc <_fstat_r>
 8004246:	2800      	cmp	r0, #0
 8004248:	dbf1      	blt.n	800422e <__swhatbuf_r+0x12>
 800424a:	9a01      	ldr	r2, [sp, #4]
 800424c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004250:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004254:	425a      	negs	r2, r3
 8004256:	415a      	adcs	r2, r3
 8004258:	602a      	str	r2, [r5, #0]
 800425a:	e7ee      	b.n	800423a <__swhatbuf_r+0x1e>
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	2000      	movs	r0, #0
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	b016      	add	sp, #88	; 0x58
 8004264:	bd70      	pop	{r4, r5, r6, pc}
	...

08004268 <__smakebuf_r>:
 8004268:	898b      	ldrh	r3, [r1, #12]
 800426a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800426c:	079d      	lsls	r5, r3, #30
 800426e:	4606      	mov	r6, r0
 8004270:	460c      	mov	r4, r1
 8004272:	d507      	bpl.n	8004284 <__smakebuf_r+0x1c>
 8004274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	6123      	str	r3, [r4, #16]
 800427c:	2301      	movs	r3, #1
 800427e:	6163      	str	r3, [r4, #20]
 8004280:	b002      	add	sp, #8
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	ab01      	add	r3, sp, #4
 8004286:	466a      	mov	r2, sp
 8004288:	f7ff ffc8 	bl	800421c <__swhatbuf_r>
 800428c:	9900      	ldr	r1, [sp, #0]
 800428e:	4605      	mov	r5, r0
 8004290:	4630      	mov	r0, r6
 8004292:	f7ff fa57 	bl	8003744 <_malloc_r>
 8004296:	b948      	cbnz	r0, 80042ac <__smakebuf_r+0x44>
 8004298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429c:	059a      	lsls	r2, r3, #22
 800429e:	d4ef      	bmi.n	8004280 <__smakebuf_r+0x18>
 80042a0:	f023 0303 	bic.w	r3, r3, #3
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	81a3      	strh	r3, [r4, #12]
 80042aa:	e7e3      	b.n	8004274 <__smakebuf_r+0xc>
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <__smakebuf_r+0x7c>)
 80042ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	6020      	str	r0, [r4, #0]
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	81a3      	strh	r3, [r4, #12]
 80042ba:	9b00      	ldr	r3, [sp, #0]
 80042bc:	6163      	str	r3, [r4, #20]
 80042be:	9b01      	ldr	r3, [sp, #4]
 80042c0:	6120      	str	r0, [r4, #16]
 80042c2:	b15b      	cbz	r3, 80042dc <__smakebuf_r+0x74>
 80042c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c8:	4630      	mov	r0, r6
 80042ca:	f000 f889 	bl	80043e0 <_isatty_r>
 80042ce:	b128      	cbz	r0, 80042dc <__smakebuf_r+0x74>
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	89a0      	ldrh	r0, [r4, #12]
 80042de:	4305      	orrs	r5, r0
 80042e0:	81a5      	strh	r5, [r4, #12]
 80042e2:	e7cd      	b.n	8004280 <__smakebuf_r+0x18>
 80042e4:	0800355d 	.word	0x0800355d

080042e8 <__malloc_lock>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__malloc_lock+0x8>)
 80042ea:	f7ff ba09 	b.w	8003700 <__retarget_lock_acquire_recursive>
 80042ee:	bf00      	nop
 80042f0:	20000160 	.word	0x20000160

080042f4 <__malloc_unlock>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__malloc_unlock+0x8>)
 80042f6:	f7ff ba04 	b.w	8003702 <__retarget_lock_release_recursive>
 80042fa:	bf00      	nop
 80042fc:	20000160 	.word	0x20000160

08004300 <_free_r>:
 8004300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004302:	2900      	cmp	r1, #0
 8004304:	d044      	beq.n	8004390 <_free_r+0x90>
 8004306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430a:	9001      	str	r0, [sp, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f1a1 0404 	sub.w	r4, r1, #4
 8004312:	bfb8      	it	lt
 8004314:	18e4      	addlt	r4, r4, r3
 8004316:	f7ff ffe7 	bl	80042e8 <__malloc_lock>
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <_free_r+0x94>)
 800431c:	9801      	ldr	r0, [sp, #4]
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	b933      	cbnz	r3, 8004330 <_free_r+0x30>
 8004322:	6063      	str	r3, [r4, #4]
 8004324:	6014      	str	r4, [r2, #0]
 8004326:	b003      	add	sp, #12
 8004328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800432c:	f7ff bfe2 	b.w	80042f4 <__malloc_unlock>
 8004330:	42a3      	cmp	r3, r4
 8004332:	d908      	bls.n	8004346 <_free_r+0x46>
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	1961      	adds	r1, r4, r5
 8004338:	428b      	cmp	r3, r1
 800433a:	bf01      	itttt	eq
 800433c:	6819      	ldreq	r1, [r3, #0]
 800433e:	685b      	ldreq	r3, [r3, #4]
 8004340:	1949      	addeq	r1, r1, r5
 8004342:	6021      	streq	r1, [r4, #0]
 8004344:	e7ed      	b.n	8004322 <_free_r+0x22>
 8004346:	461a      	mov	r2, r3
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b10b      	cbz	r3, 8004350 <_free_r+0x50>
 800434c:	42a3      	cmp	r3, r4
 800434e:	d9fa      	bls.n	8004346 <_free_r+0x46>
 8004350:	6811      	ldr	r1, [r2, #0]
 8004352:	1855      	adds	r5, r2, r1
 8004354:	42a5      	cmp	r5, r4
 8004356:	d10b      	bne.n	8004370 <_free_r+0x70>
 8004358:	6824      	ldr	r4, [r4, #0]
 800435a:	4421      	add	r1, r4
 800435c:	1854      	adds	r4, r2, r1
 800435e:	42a3      	cmp	r3, r4
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	d1e0      	bne.n	8004326 <_free_r+0x26>
 8004364:	681c      	ldr	r4, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	6053      	str	r3, [r2, #4]
 800436a:	4421      	add	r1, r4
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	e7da      	b.n	8004326 <_free_r+0x26>
 8004370:	d902      	bls.n	8004378 <_free_r+0x78>
 8004372:	230c      	movs	r3, #12
 8004374:	6003      	str	r3, [r0, #0]
 8004376:	e7d6      	b.n	8004326 <_free_r+0x26>
 8004378:	6825      	ldr	r5, [r4, #0]
 800437a:	1961      	adds	r1, r4, r5
 800437c:	428b      	cmp	r3, r1
 800437e:	bf04      	itt	eq
 8004380:	6819      	ldreq	r1, [r3, #0]
 8004382:	685b      	ldreq	r3, [r3, #4]
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	bf04      	itt	eq
 8004388:	1949      	addeq	r1, r1, r5
 800438a:	6021      	streq	r1, [r4, #0]
 800438c:	6054      	str	r4, [r2, #4]
 800438e:	e7ca      	b.n	8004326 <_free_r+0x26>
 8004390:	b003      	add	sp, #12
 8004392:	bd30      	pop	{r4, r5, pc}
 8004394:	20000164 	.word	0x20000164

08004398 <_read_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4d07      	ldr	r5, [pc, #28]	; (80043b8 <_read_r+0x20>)
 800439c:	4604      	mov	r4, r0
 800439e:	4608      	mov	r0, r1
 80043a0:	4611      	mov	r1, r2
 80043a2:	2200      	movs	r2, #0
 80043a4:	602a      	str	r2, [r5, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f7fc fa8a 	bl	80008c0 <_read>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d102      	bne.n	80043b6 <_read_r+0x1e>
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	b103      	cbz	r3, 80043b6 <_read_r+0x1e>
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	2000016c 	.word	0x2000016c

080043bc <_fstat_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4d07      	ldr	r5, [pc, #28]	; (80043dc <_fstat_r+0x20>)
 80043c0:	2300      	movs	r3, #0
 80043c2:	4604      	mov	r4, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	f7fc fabe 	bl	800094a <_fstat>
 80043ce:	1c43      	adds	r3, r0, #1
 80043d0:	d102      	bne.n	80043d8 <_fstat_r+0x1c>
 80043d2:	682b      	ldr	r3, [r5, #0]
 80043d4:	b103      	cbz	r3, 80043d8 <_fstat_r+0x1c>
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	bd38      	pop	{r3, r4, r5, pc}
 80043da:	bf00      	nop
 80043dc:	2000016c 	.word	0x2000016c

080043e0 <_isatty_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d06      	ldr	r5, [pc, #24]	; (80043fc <_isatty_r+0x1c>)
 80043e4:	2300      	movs	r3, #0
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fc fabd 	bl	800096a <_isatty>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_isatty_r+0x1a>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_isatty_r+0x1a>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	2000016c 	.word	0x2000016c

08004400 <_init>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr

0800440c <_fini>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr
